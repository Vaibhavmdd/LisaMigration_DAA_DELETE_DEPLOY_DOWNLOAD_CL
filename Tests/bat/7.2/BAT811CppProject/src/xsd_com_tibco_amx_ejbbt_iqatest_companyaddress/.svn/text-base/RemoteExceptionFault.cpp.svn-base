//(c) Copyright 2008, TIBCO Software Inc.  All rights reserved.
//LEGAL NOTICE:  This source code is provided to specific authorized end
//users pursuant to a separate license agreement.  You MAY NOT use this
//source code if you do not have a separate license from TIBCO Software
//Inc.  Except as expressly set forth in such license agreement, this
//source code, or any portion thereof, may not be used, modified,
//reproduced, transmitted, or distributed in any form or by any means,
//electronic or mechanical, without written permission from  TIBCO
//Software Inc.
//THIS CODE HAS BEEN GENERATED BY A TOOL. DO NOT EDIT.
#include "RemoteExceptionFault.h"

namespace XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS
{
	RemoteExceptionFault::RemoteExceptionFault()
	{
		this->t_value = new XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement();
	}

	RemoteExceptionFault::RemoteExceptionFault(XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement& value) throw (TIBAMX_CORE_NAMESPACE::TibcoRuntimeException)
	{
		this->t_value = new XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement(value);
	}

	RemoteExceptionFault::RemoteExceptionFault(const RemoteExceptionFault & obj)
	{
		this->t_value = new XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement(*obj.t_value);
	}

	RemoteExceptionFault::~RemoteExceptionFault()
	{
		if(this->t_value != NULL) delete this->t_value;
	}

	const XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement& RemoteExceptionFault::get_value() const
	{
		return *t_value;
	}

	void RemoteExceptionFault::set_value(XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement& val)
	{
		*t_value = val;
	}

	RemoteExceptionFault & RemoteExceptionFault::operator=(const RemoteExceptionFault & obj)
	{
		if (this != &obj)
		{
			delete this->t_value;
			this->t_value = new XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement(*obj.t_value);
		}
		return (*this);
	}

	void RemoteExceptionFaultSerializer::serialize(XERCES_CPP_NAMESPACE::DOMElement* element, const void* parameter, Context* context)  throw (TIBAMX_CORE_NAMESPACE::ServiceDataException)
	{
		const RemoteExceptionFault* tk = (RemoteExceptionFault*)parameter;
		const XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement& value = tk->get_value();
		XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElementSerializer::serialize(element, (void*)&value, context);
	}
	
	void* RemoteExceptionFaultSerializer::deserialize(TIBAMX_CORE_NAMESPACE::DOMElementIterator& elementItr, void* parameter, Context* context)  throw (TIBAMX_CORE_NAMESPACE::ServiceDataException)
	{
		RemoteExceptionFault* paramValue = (parameter == NULL)?	new RemoteExceptionFault() :(RemoteExceptionFault*)parameter;
		XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement* value = (XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElement*)XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionElementSerializer::deserialize(elementItr, NULL, context);
		paramValue->set_value(*value);

		delete value;
		return (void*)paramValue;
	}

}
TIBAMX_CORE_NAMESPACE::Boolean operator==(const XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionFault & type1, const XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionFault & type2)
{
	return (type1.get_value() == type2.get_value());
}

TIBAMX_CORE_NAMESPACE::Boolean operator!=(const XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionFault & type1, const XSD_COM_TIBCO_AMX_EJBBT_IQATEST_COMPANYADDRESS::RemoteExceptionFault & type2)
{
	return (type1.get_value() != type2.get_value());
}
