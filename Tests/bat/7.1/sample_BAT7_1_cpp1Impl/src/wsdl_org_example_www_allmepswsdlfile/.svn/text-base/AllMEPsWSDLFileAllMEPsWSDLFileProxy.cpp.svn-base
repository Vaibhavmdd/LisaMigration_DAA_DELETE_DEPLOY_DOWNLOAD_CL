//(c) Copyright 2008, TIBCO Software Inc.  All rights reserved.
//LEGAL NOTICE:  This source code is provided to specific authorized end
//users pursuant to a separate license agreement.  You MAY NOT use this
//source code if you do not have a separate license from TIBCO Software
//Inc.  Except as expressly set forth in such license agreement, this
//source code, or any portion thereof, may not be used, modified,
//reproduced, transmitted, or distributed in any form or by any means,
//electronic or mechanical, without written permission from  TIBCO
//Software Inc.
//THIS CODE HAS BEEN GENERATED BY A TOOL. DO NOT EDIT.

#include "AllMEPsWSDLFileAllMEPsWSDLFileProxy.h"

namespace WSDL_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE
{

	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_TNS_IN=XmlUtils::transcode("tns:In");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_HTTP___WWW_EXAMPLE_ORG_ALLMEPSWSDLFILE_=XmlUtils::transcode("http://www.example.org/AllMEPsWSDLFile/");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_TNS_INOUTFAULT=XmlUtils::transcode("tns:InOutFault");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_TNS_INOUT=XmlUtils::transcode("tns:InOut");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_TNS_NEWOPERATION_DATA=XmlUtils::transcode("tns:NewOperation_data");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_NEWOPERATIONRESPONSE_DATA_TEXT=XmlUtils::transcode("NewOperationResponse_data_text");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_NEWOPERATIONRESPONSE_DATA=XmlUtils::transcode("NewOperationResponse_data");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_NEWOPERATIONFAULT_DATA=XmlUtils::transcode("NewOperationFault_data");
	 const XMLCh* AllMEPsWSDLFileAllMEPsWSDLFileProxy::ALLMEPSWSDLFILE_TNS_NEWOPERATION_DATA_BINARY=XmlUtils::transcode("tns:NewOperation_data_binary");

	void AllMEPsWSDLFileAllMEPsWSDLFileProxy::in(const XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperation_dataElement& parameters) throw (TIBAMX_CORE_NAMESPACE::TibcoRuntimeException)
	{
		TIBAMX_CORE_NAMESPACE::SerializerPtr cx_serializer;

		TIBAMX_CPP_NAMESPACE::Operation cx_operation("In");
		cx_operation.addParameter("referenceName", "AllMEPsWSDLFile");
		cx_operation.addParameter("mep", "ONE_WAY");
		cx_operation.addParameter("namespaceUri", "http://www.example.org/AllMEPsWSDLFile/");
		cx_operation.addParameter("localPart", "AllMEPsWSDLFile");
		XERCES_CPP_NAMESPACE::DOMDocument* cx_doc =  TIBAMX_CORE_NAMESPACE::XmlUtils::createDocument(ALLMEPSWSDLFILE_TNS_IN,ALLMEPSWSDLFILE_HTTP___WWW_EXAMPLE_ORG_ALLMEPSWSDLFILE_);
		
		XERCES_CPP_NAMESPACE::DOMElement* cx_rootElement = cx_doc->getDocumentElement();

			
		XERCES_CPP_NAMESPACE::DOMElement* cx_element0 = TIBAMX_CORE_NAMESPACE::XmlUtils::createElementNS(cx_doc,ALLMEPSWSDLFILE_TNS_NEWOPERATION_DATA,ALLMEPSWSDLFILE_HTTP___WWW_EXAMPLE_ORG_ALLMEPSWSDLFILE_);
			
		cx_rootElement->appendChild(cx_element0);
		if(&parameters == NULL)
		{
			std::string cx_errorMsg("\"NewOperation_data\" is not nillable, but value set to it is NULL.");
			throwRuntimeException(ServiceDataException,cx_errorMsg.c_str());
		}
			
			cx_serializer = &XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperation_dataElementSerializer::serialize;
			(*cx_serializer)(cx_element0,&parameters, NULL);
		cx_operation.addParameter("RequestDocument",(XERCES_CPP_NAMESPACE::DOMDocument*)cx_doc);
		try 
		{
			// Call the external code. ONEWAY Call
			send(cx_operation, false);

			cx_doc->release();
		}
		catch (TIBAMX_CORE_NAMESPACE::ServiceRuntimeException& cx_exp)
		{
			cx_doc->release();
			rethrowException(cx_exp);
		}
	}

	XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationResponse_dataElement*  AllMEPsWSDLFileAllMEPsWSDLFileProxy::inOut(const XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperation_dataElement& parameters) throw (TIBAMX_CORE_NAMESPACE::TibcoRuntimeException)
	{
		TIBAMX_CORE_NAMESPACE::SerializerPtr cx_serializer;

		TIBAMX_CPP_NAMESPACE::Operation cx_operation("InOut");
		cx_operation.addParameter("referenceName", "AllMEPsWSDLFile");
		cx_operation.addParameter("mep", "REQUEST_RESPONSE");
		cx_operation.addParameter("namespaceUri", "http://www.example.org/AllMEPsWSDLFile/");
		cx_operation.addParameter("localPart", "AllMEPsWSDLFile");
		XERCES_CPP_NAMESPACE::DOMDocument* cx_doc =  TIBAMX_CORE_NAMESPACE::XmlUtils::createDocument(ALLMEPSWSDLFILE_TNS_INOUT,ALLMEPSWSDLFILE_HTTP___WWW_EXAMPLE_ORG_ALLMEPSWSDLFILE_);
		
		XERCES_CPP_NAMESPACE::DOMElement* cx_rootElement = cx_doc->getDocumentElement();

			
		XERCES_CPP_NAMESPACE::DOMElement* cx_element0 = TIBAMX_CORE_NAMESPACE::XmlUtils::createElementNS(cx_doc,ALLMEPSWSDLFILE_TNS_NEWOPERATION_DATA,ALLMEPSWSDLFILE_HTTP___WWW_EXAMPLE_ORG_ALLMEPSWSDLFILE_);
			
		cx_rootElement->appendChild(cx_element0);
		if(&parameters == NULL)
		{
			std::string cx_errorMsg("\"NewOperation_data\" is not nillable, but value set to it is NULL.");
			throwRuntimeException(ServiceDataException,cx_errorMsg.c_str());
		}
			
			cx_serializer = &XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperation_dataElementSerializer::serialize;
			(*cx_serializer)(cx_element0,&parameters, NULL);
		cx_operation.addParameter("RequestDocument",(XERCES_CPP_NAMESPACE::DOMDocument*)cx_doc);
		try 
		{
			// Call the external code. IN_OUT Call
			TIBAMX_CORE_NAMESPACE::DeSerializerPtr cx_deserializer;
			send(cx_operation, true);

			XERCES_CPP_NAMESPACE::DOMDocument* cx_responseDoc = (XERCES_CPP_NAMESPACE::DOMDocument*)cx_operation.getReturnValue();
			XERCES_CPP_NAMESPACE::DOMElement* root = cx_responseDoc->getDocumentElement();

			DOMElementIterator cx_elementItr(root->getChildNodes());

				
			cx_deserializer = &XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationResponse_dataElementSerializer::deserialize;
			XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationResponse_dataElement* cx_returnVal  = (XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationResponse_dataElement*)TIBAMX_CORE_NAMESPACE::SerializerUtils::ProcessNonDefaultElement(cx_elementItr,ALLMEPSWSDLFILE_NEWOPERATIONRESPONSE_DATA,cx_deserializer);
				

			cx_doc->release();
			cx_responseDoc->release();
			return cx_returnVal;
		}
		catch (TIBAMX_CORE_NAMESPACE::ServiceRuntimeException& cx_exp)
		{
			cx_doc->release();
			rethrowException(cx_exp);
		}
	}

	TIBAMX_CORE_NAMESPACE::String*  AllMEPsWSDLFileAllMEPsWSDLFileProxy::inOutFault(const TIBAMX_CORE_NAMESPACE::Base64Binary& parameters) throw (TIBAMX_CORE_NAMESPACE::TibcoRuntimeException,XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationFault_dataFault)
	{
		TIBAMX_CORE_NAMESPACE::SerializerPtr cx_serializer;

		TIBAMX_CPP_NAMESPACE::Operation cx_operation("InOutFault");
		cx_operation.addParameter("referenceName", "AllMEPsWSDLFile");
		cx_operation.addParameter("mep", "REQUEST_RESPONSE");
		cx_operation.addParameter("namespaceUri", "http://www.example.org/AllMEPsWSDLFile/");
		cx_operation.addParameter("localPart", "AllMEPsWSDLFile");
		XERCES_CPP_NAMESPACE::DOMDocument* cx_doc =  TIBAMX_CORE_NAMESPACE::XmlUtils::createDocument(ALLMEPSWSDLFILE_TNS_INOUTFAULT,ALLMEPSWSDLFILE_HTTP___WWW_EXAMPLE_ORG_ALLMEPSWSDLFILE_);
		
		XERCES_CPP_NAMESPACE::DOMElement* cx_rootElement = cx_doc->getDocumentElement();

			
		XERCES_CPP_NAMESPACE::DOMElement* cx_element0 = TIBAMX_CORE_NAMESPACE::XmlUtils::createElementNS(cx_doc,ALLMEPSWSDLFILE_TNS_NEWOPERATION_DATA_BINARY,ALLMEPSWSDLFILE_HTTP___WWW_EXAMPLE_ORG_ALLMEPSWSDLFILE_);
			
		cx_rootElement->appendChild(cx_element0);
		if(&parameters == NULL)
		{
			std::string cx_errorMsg("\"NewOperation_data_binary\" is not nillable, but value set to it is NULL.");
			throwRuntimeException(ServiceDataException,cx_errorMsg.c_str());
		}
			
			cx_serializer = &TIBAMX_CORE_NAMESPACE::Base64BinarySerializer::serialize;
			(*cx_serializer)(cx_element0,&parameters, NULL);
		cx_operation.addParameter("RequestDocument",(XERCES_CPP_NAMESPACE::DOMDocument*)cx_doc);
		try 
		{
			// Call the external code. IN_OUT Call
			TIBAMX_CORE_NAMESPACE::DeSerializerPtr cx_deserializer;
			send(cx_operation, true);

			XERCES_CPP_NAMESPACE::DOMDocument* cx_responseDoc = (XERCES_CPP_NAMESPACE::DOMDocument*)cx_operation.getReturnValue();
			XERCES_CPP_NAMESPACE::DOMElement* root = cx_responseDoc->getDocumentElement();

			DOMElementIterator cx_elementItr(root->getChildNodes());
			if(cx_operation.hasFault()) 
			{
				const char* faultName = cx_elementItr.getNextElementName();
				if(strcmp(faultName,"NewOperationFault_data") == 0) 
				{
												
					cx_deserializer = &XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationFault_dataFaultSerializer::deserialize;
					XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationFault_dataFault* cx_returnVal  = (XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationFault_dataFault*)TIBAMX_CORE_NAMESPACE::SerializerUtils::ProcessNonDefaultElement(cx_elementItr,ALLMEPSWSDLFILE_NEWOPERATIONFAULT_DATA,cx_deserializer);
						
					XSD_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE::NewOperationFault_dataFault cx_newReturnVal(*cx_returnVal);

					delete cx_returnVal;
					cx_doc->release();
					cx_responseDoc->release();
					throw cx_newReturnVal;
				}
			}

				
			cx_deserializer = &TIBAMX_CORE_NAMESPACE::StringSerializer::deserialize;
			TIBAMX_CORE_NAMESPACE::String* cx_returnVal  = (TIBAMX_CORE_NAMESPACE::String*)TIBAMX_CORE_NAMESPACE::SerializerUtils::ProcessNonDefaultElement(cx_elementItr,ALLMEPSWSDLFILE_NEWOPERATIONRESPONSE_DATA_TEXT,cx_deserializer);
				

			cx_doc->release();
			cx_responseDoc->release();
			return cx_returnVal;
		}
		catch (TIBAMX_CORE_NAMESPACE::ServiceRuntimeException& cx_exp)
		{
			cx_doc->release();
			rethrowException(cx_exp);
		}
	}
} //END of WSDL_ORG_EXAMPLE_WWW_ALLMEPSWSDLFILE
