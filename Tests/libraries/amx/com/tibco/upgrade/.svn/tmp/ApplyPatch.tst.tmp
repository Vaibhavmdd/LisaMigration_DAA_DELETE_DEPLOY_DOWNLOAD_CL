<?xml version="1.0" ?>


<!-- Test Case created by LISA Test Editor -->
<!-- On: Tue Jul 23 14:07:04 PDT 2013 -->


<TestCase name="ApplyPatch" version="2">
<id>10e34bf4</id>
<Documentation>This subprocess applies patch, cleanses admin (if required) and upgrades systemnode (if required)&#13;&#10;</Documentation>
<sig>ZWQ9MiZ0Y3Y9MiZsaXNhdj00LjYuNyAoNC42LjcuMTYpJm5vZGVzPS0zMTQyNTE4MTA=</sig>
<rootNode>isPatchRequired</rootNode>
<subprocess>true</subprocess>

<initState>
    <Parameter>
    <key>targetVersion</key>
    <value></value>
    <name>targetVersion - Required</name>
    </Parameter>
    <Parameter>
    <key>patchManagerPath</key>
    <value>{{TIBCO_HOME}}/amx/3.1</value>
    <name>Absolute path to the patch manager application</name>
    </Parameter>
    <Parameter>
    <key>logFileLocation</key>
    <value>{{tibco.test.case.log.dir}}</value>
    <name>logFileLocation</name>
    </Parameter>
    <Parameter>
    <key>propFile</key>
    <value></value>
    <name>Absolute path to property file - Optional.</name>
    </Parameter>
    <Parameter>
    <key>enterpriseName</key>
    <value>{{admin.group.name}}</value>
    <name>Enterprise name</name>
    </Parameter>
    <Parameter>
    <key>tibcoInstanceName</key>
    <value>{{host.instance}}</value>
    <name>TIBCOHost instance name</name>
    </Parameter>
    <Parameter>
    <key>adminServerName</key>
    <value>{{admin.instance.name}}</value>
    <name>Admin Server name</name>
    </Parameter>
    <Parameter>
    <key>tibcoConfigHome</key>
    <value>{{TIBCO_CONFIG_HOME}}</value>
    <name>TIBCO config home</name>
    </Parameter>
    <Parameter>
    <key>timeout</key>
    <value>600</value>
    <name>Wait for a number of seconds before giving up on TIBCOHost</name>
    </Parameter>
    <Parameter>
    <key>propertyFileLocation</key>
    <value>{{tibco.test.case.log.dir}}</value>
    <name>property file location</name>
    </Parameter>
    <Parameter>
    <key>administratorFolderVersion</key>
    <value>3.1</value>
    <name>Administrator folder version on disk</name>
    </Parameter>
</initState>

<resultState>
    <Parameter>
    <key>_site.properties</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>wizards.xml</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>_local.properties</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>reports</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>setLISA_HOME.bat</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>{{tibco.test.case.log.dir}}</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>logging.properties</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>embedded_servers</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>webreckeys.ks</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>DemoServer</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>doc</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>rmi-truststore.jks</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>lib</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>.lisa.properties.lock</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>httpbrowsers.xml</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>contenttypes.xml</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>bin</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>.install4j</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>rmi-keystore.jks</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>{{tmpDir}}</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>.local.properties.lock</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>derby.log</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>datePatterns.properties</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>configure.bat</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>incontainer</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>j2eeservers.xml</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>uninstall.exe</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>jre</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>typemap.properties</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>lisa.properties</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>sql</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>appletviewer.policy</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>mibdefs.xml</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>hotDeploy</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>examples</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>snmp</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>addons</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>tmp</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>licenses</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>examples_ejb3</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>lisa.permissions</key>
    <value>Property From Config</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp.time</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp.time</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.isPatchRequired.rsp.time</key>
    <value>Set in Step isPatchRequired</value>
    </Parameter>
    <Parameter>
    <key>lisa.log.rsp.time</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyInputVariables.rsp.time</key>
    <value>Set in Step verifyInputVariables</value>
    </Parameter>
    <Parameter>
    <key>lisa.applyPatch.rsp</key>
    <value>Set in Step applyPatch</value>
    </Parameter>
    <Parameter>
    <key>lisa.checkPropFile.rsp</key>
    <value>Set in Step checkPropFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.isSystemNodeUpgradeRequired.rsp.time</key>
    <value>Set in Step isSystemNodeUpgradeRequired</value>
    </Parameter>
    <Parameter>
    <key>lisa.isPatchRequired.rsp</key>
    <value>Set in Step isPatchRequired</value>
    </Parameter>
    <Parameter>
    <key>lisa.log.rsp</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyInputVariables.rsp</key>
    <value>Set in Step verifyInputVariables</value>
    </Parameter>
    <Parameter>
    <key>lisa.stopTIBCOHost.rsp</key>
    <value>Set in Step stopTIBCOHost</value>
    </Parameter>
    <Parameter>
    <key>lisa.stopTIBCOHost.rsp.time</key>
    <value>Set in Step stopTIBCOHost</value>
    </Parameter>
    <Parameter>
    <key>lisa.isAdminDataCleanseRequired.rsp</key>
    <value>Set in Step isAdminDataCleanseRequired</value>
    </Parameter>
    <Parameter>
    <key>thPropFile</key>
    <value>Set in Step checkPropFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.isSystemNodeUpgradeRequired.rsp</key>
    <value>Set in Step isSystemNodeUpgradeRequired</value>
    </Parameter>
    <Parameter>
    <key>lisa.wait.rsp</key>
    <value>Set in Step wait</value>
    </Parameter>
    <Parameter>
    <key>lisa.wait.rsp.time</key>
    <value>Set in Step wait</value>
    </Parameter>
    <Parameter>
    <key>lisa.describeAvailablePatches.rsp</key>
    <value>Set in Step describeAvailablePatches</value>
    </Parameter>
    <Parameter>
    <key>lisa.describeAvailablePatches.rsp.time</key>
    <value>Set in Step describeAvailablePatches</value>
    </Parameter>
    <Parameter>
    <key>lisa.applyPatch.rsp.time</key>
    <value>Set in Step applyPatch</value>
    </Parameter>
    <Parameter>
    <key>lisa.describeAppliedPatch.rsp</key>
    <value>Set in Step describeAppliedPatch</value>
    </Parameter>
    <Parameter>
    <key>lisa.describeAppliedPatch.rsp.time</key>
    <value>Set in Step describeAppliedPatch</value>
    </Parameter>
    <Parameter>
    <key>lisa.isAdminDataCleanseRequired.rsp.time</key>
    <value>Set in Step isAdminDataCleanseRequired</value>
    </Parameter>
    <Parameter>
    <key>lisa.adminDataCleanseFolder.rsp</key>
    <value>Set in Step adminDataCleanseFolder</value>
    </Parameter>
    <Parameter>
    <key>lisa.adminDataCleanseFolder.rsp.time</key>
    <value>Set in Step adminDataCleanseFolder</value>
    </Parameter>
    <Parameter>
    <key>adminDataCleanseFolder</key>
    <value>Set in Step adminDataCleanseFolder</value>
    </Parameter>
    <Parameter>
    <key>dataCleanseFolder</key>
    <value>Set in Step adminDataCleanseFolder</value>
    </Parameter>
    <Parameter>
    <key>lisa.checkPropFile.rsp.time</key>
    <value>Set in Step checkPropFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.buildPropFileContent.rsp</key>
    <value>Set in Step buildPropFileContent</value>
    </Parameter>
    <Parameter>
    <key>lisa.buildPropFileContent.rsp.time</key>
    <value>Set in Step buildPropFileContent</value>
    </Parameter>
    <Parameter>
    <key>thPropFileContent</key>
    <value>Set in Step buildPropFileContent</value>
    </Parameter>
    <Parameter>
    <key>lisa.writePropFile.rsp</key>
    <value>Set in Step writePropFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.writePropFile.rsp.time</key>
    <value>Set in Step writePropFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.cleanseAdminData.rsp</key>
    <value>Set in Step cleanseAdminData</value>
    </Parameter>
    <Parameter>
    <key>lisa.cleanseAdminData.rsp.time</key>
    <value>Set in Step cleanseAdminData</value>
    </Parameter>
    <Parameter>
    <key>lisa.UpgradeSystemNode.rsp</key>
    <value>Set in Step UpgradeSystemNode</value>
    </Parameter>
    <Parameter>
    <key>lisa.UpgradeSystemNode.rsp.time</key>
    <value>Set in Step UpgradeSystemNode</value>
    </Parameter>
</resultState>

<Configurations>
<Configuration>
<name>default</name>
<external>false</external>
<props>
</props>
</Configuration>
</Configurations>
    <Node name="isPatchRequired" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="log" > 

<graphx>778</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;String isPatchRequired() {&#13;&#10;&#9;&#9;String response = &quot;Patch Manager is required for &quot;  + targetVersion;;&#13;&#10;&#9;&#9;&#13;&#10;        if (   (targetVersion.equals(&quot;3.1.2.HF1&quot;))  ||&#13;&#10;               (targetVersion.equals(&quot;3.1.2.HF2&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.1.2.HF3&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.1.2.HF4&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.1.3.HF1&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.1.2&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.1.3&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.1.4&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.1.5&quot;)) ||&#13;&#10;               (targetVersion.equals(&quot;3.2.0&quot;)) ||&#13;&#10;                (targetVersion.equals(&quot;3.2.1&quot;)) ||&#13;&#10;                (targetVersion.equals(&quot;3.3.0&quot;)) )&#13;&#10;           {&#13;&#10;        &#9;&#9;response = &quot;NotRequired: No need to run patch manager since patch Manager is not required for &quot;  + targetVersion;&#13;&#10;                return response;&#13;&#10;           }&#13;&#10;            &#13;&#10;           return response;&#13;&#10;        }&#13;&#10;&#13;&#10;return isPatchRequired();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>No need to run patch manager for {{targetVersion}}</log>
<then>end</then>
<valueToAssertKey></valueToAssertKey>
        <param>NotRequired:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="log" log=""
          type="com.itko.lisa.test.TestNodeLogger" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="verifyInputVariables" > 

<graphx>10</graphx>
<graphy>10</graphy>
      <log>Applying Patch for : &#13;&#10;&#13;&#10;AmxVersion : {{targetVersion}}&#13;&#10;EnterpriseName : {{admin.group.name}}&#13;&#10;AdminServerName : {{admin.instance.name}}&#13;&#10;SystemNode : SystemNode&#13;&#10;HostInstanceName : {{host.instance}}&#13;&#10;ConfigHome : {{TIBCO_CONFIG_HOME}}&#13;&#10;&#13;&#10;</log>
    </Node>


    <Node name="verifyInputVariables" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="stopTIBCOHost" > 

<graphx>778</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;String checkInputVariables() {&#13;&#10;&#9;&#9;String response = &quot;Fail:&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#13;&#10;           if (    (targetVersion.equals(&quot;3.1.2&quot;)) ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.2.HF1&quot;))  ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.2.HF2&quot;)) ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.2.HF3&quot;)) ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.2.HF4&quot;)) ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.3.HF1&quot;)) ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.3&quot;)) ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.4&quot;)) ||&#13;&#10;                   (targetVersion.equals(&quot;3.1.5&quot;)) )&#13;&#10;            {&#13;&#10;                 response = &quot;No need to run Patch manager for &quot; + targetVersion;&#13;&#10;                 return response;&#13;&#10;            }  &#13;&#10;    &#13;&#10;           if (logFileLocation.equals(&quot;&quot;))&#13;&#10;                return errorMsg + &quot;: Log file is required.&quot;;   &#13;&#10;&#13;&#10;&#9;&#9;&#9;File patchManagerPath = null;&#13;&#10;&#9;&#9;&#9;if ((patchManagerPath != null) &amp;&amp; (!patchManagerPath.equals(&quot;&quot;))) {&#13;&#10;&#9;&#9;&#9;&#9;patchManagerPath = new File(testExec.parseInState(patchManagerPath).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;&#9;if((!patchManagerPath.exists()) || (!patchManagerPath.isDirectory())) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;The path to patch manager executable is not valid. &quot;+ patchManagerPath);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;            if ((propFile == null) || (propFile.equals(&quot;&quot;)) ){&#13;&#10;&#13;&#10;                if ((enterpriseName == null) || (enterpriseName.equals(&quot;&quot;)) ) {&#13;&#10;        &#9;&#9;&#9;throw new Exception(&quot;enterpriseName cannot be null.&quot;);&#13;&#10;            &#9;}&#13;&#10;           &#13;&#10;                if ((tibcoInstanceName == null) || (tibcoInstanceName.equals(&quot;&quot;)) ) {&#13;&#10;                    throw new Exception(&quot;tibcoInstanceName cannot be null.&quot;);&#13;&#10;                }&#13;&#10;                &#13;&#10;                if ((adminServerName == null) || (adminServerName.equals(&quot;&quot;)) ) {&#13;&#10;                    throw new Exception(&quot;adminServerName cannot be null.&quot;);&#13;&#10;                }&#13;&#10;&#13;&#10;                if ((tibcoConfigHome == null) || (tibcoConfigHome.equals(&quot;&quot;)) ) {&#13;&#10;                    throw new Exception(&quot;tibcoConfigHome cannot be null.&quot;);&#13;&#10;                }&#13;&#10;    &#13;&#10;            } else {&#13;&#10;                // check for the property file existence&#13;&#10;&#13;&#10;                File propertyFile = null;&#13;&#10;                if ((propFile != null) &amp;&amp; (!propFile.equals(&quot;&quot;))) {&#13;&#10;                    propertyFile = new File(testExec.parseInState(propFile).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;                }    &#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;                if (!propertyFile.canRead()) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;Property file not found/cannot read it. &quot;+propFile);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;                if (!propertyFile.isFile()) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;property file is not a normal file. &quot;+propFile);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;            // Let&apos;s also verify if TIBCO_JAVA_HOME exists since we use that to launch Ant&#13;&#10;            File javaHome = new File(testExec.parseInState(TIBCO_JAVA_HOME).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;            if (!javaHome.exists()) {&#13;&#10;                throw new Exception(&quot;Java home directory is not valid: &quot; + TIBCO_JAVA_HOME);&#13;&#10;            }&#13;&#10;&#13;&#10;&#9;&#9;&#9;response = &quot;Pass: Input variables are valid.&quot;;&#13;&#10;&#13;&#10;&#9;&#9;}catch(Exception e) {&#13;&#10;&#9;&#9;&#9;response = &quot;Fail: &quot;+e.getLocalizedMessage();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;return checkInputVariables();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Input parameters incorrect</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>Fail:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="stopTIBCOHost" log="Stop TIBCO Host with Mode=normal and Wait=true"
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="wait" > 

<graphx>10</graphx>
<graphy>10</graphy>
<Documentation>Stop TIBCO Host in normal mode with wait set to true (synchronized call):&#13;&#10;TIBCO Host is supposed to wait for all the nodes to shutdown before it terminates.</Documentation>
<Subprocess>{{TIBCO_AMX_LIBRARY}}/com/tibco/tibcohost/StopTibcoHost.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>wait</onFail>
<Parameters>
    <Parameter>
    <key>host</key>
    <value>{{LISA_HOST}}</value>
    <name>Host on which to stop the TIBCOHost</name>
    </Parameter>
    <Parameter>
    <key>tibcoHostinstance</key>
    <value>{{TIBCO_HOST_CONFIG}}/{{host.instance}}/host</value>
    <name>TIBCOHost instance directory</name>
    </Parameter>
    <Parameter>
    <key>mode</key>
    <value>immediate</value>
    <name>Stop mode used for stopping the node (normal - immediate - abort). Default is normal.</name>
    </Parameter>
    <Parameter>
    <key>wait</key>
    <value>true</value>
    <name>If set to true the wait becomes synchronous and only returns when all node processes were stopped. Default is false</name>
    </Parameter>
    <Parameter>
    <key>timeout</key>
    <value>12000</value>
    <name>Max number of seconds to wait to allow the TIBCOHost to stop</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="wait" log="repeat sleep"
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="describeAvailablePatches" > 

<graphx>301</graphx>
<graphy>37</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/util/Sleep.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>windowsSleep</key>
    <value>10</value>
    <name>Number of seconds to sleep on Windows platforms</name>
    </Parameter>
    <Parameter>
    <key>unixSleep</key>
    <value>10</value>
    <name>Number of seconds to sleep on Unix platforms</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="describeAvailablePatches" log="Start the tibcohost."
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="applyPatch" > 

<graphx>37</graphx>
<graphy>301</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/util/JVMWrapper.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>wrapperName</key>
    <value>{{patchManagerPath}}/bin/tibamx_patchmgr</value>
    <name>Absolute path to the wrapper application</name>
    </Parameter>
    <Parameter>
    <key>command</key>
    <value></value>
    <name>One of the following command switches: --install, --uninstall, --update, --start, --stop, --run</name>
    </Parameter>
    <Parameter>
    <key>propFile</key>
    <value>{{patchManagerPath}}/bin/tibamx_patchmgr.tra</value>
    <name>Absolute path to the tra file used to launch the wrapper</name>
    </Parameter>
    <Parameter>
    <key>extraCommand</key>
    <value>describeAvailablePatches -logFile {{logFileLocation}}/{{targetVersion}}-describePatch.log</value>
    <name>Extra command a specific wrapper might need</name>
    </Parameter>
    <Parameter>
    <key>startInDir</key>
    <value>{{patchManagerPath}}/bin</value>
    <name>Execute from directory</name>
    </Parameter>
    <Parameter>
    <key>waitForCompletion</key>
    <value>true</value>
    <name>Wait for the command to complete (true or false)</name>
    </Parameter>
    <Parameter>
    <key>waitBeforeOnWindows</key>
    <value>0</value>
    <name>Number of seconds to sleep on Windows platforms before starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitBeforeOnUnix</key>
    <value>0</value>
    <name>Number of seconds to sleep on Unix platforms before starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitAfterOnWindows</key>
    <value>300</value>
    <name>Number of seconds to sleep on Windows platforms after starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitAfterOnUnix</key>
    <value>20</value>
    <name>Number of seconds to sleep on Unix platforms after starting the JVM wrapper</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="applyPatch" log="Start the tibcohost."
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="describeAppliedPatch" > 

<graphx>37</graphx>
<graphy>301</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/util/JVMWrapper.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>wrapperName</key>
    <value>{{patchManagerPath}}/bin/tibamx_patchmgr</value>
    <name>Absolute path to the wrapper application</name>
    </Parameter>
    <Parameter>
    <key>command</key>
    <value></value>
    <name>One of the following command switches: --install, --uninstall, --update, --start, --stop, --run</name>
    </Parameter>
    <Parameter>
    <key>propFile</key>
    <value>{{patchManagerPath}}/bin/tibamx_patchmgr.tra</value>
    <name>Absolute path to the tra file used to launch the wrapper</name>
    </Parameter>
    <Parameter>
    <key>extraCommand</key>
    <value>applyPatch -configHomeLocation {{tibcoConfigHome}} -instanceName {{tibcoInstanceName}} -ID amx.platform.patch:{{targetVersion}} -logFile {{logFileLocation}}/{{targetVersion}}-applyPatch.log</value>
    <name>Extra command a specific wrapper might need</name>
    </Parameter>
    <Parameter>
    <key>startInDir</key>
    <value>{{patchManagerPath}}/bin</value>
    <name>Execute from directory</name>
    </Parameter>
    <Parameter>
    <key>waitForCompletion</key>
    <value>true</value>
    <name>Wait for the command to complete (true or false)</name>
    </Parameter>
    <Parameter>
    <key>waitBeforeOnWindows</key>
    <value>0</value>
    <name>Number of seconds to sleep on Windows platforms before starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitBeforeOnUnix</key>
    <value>0</value>
    <name>Number of seconds to sleep on Unix platforms before starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitAfterOnWindows</key>
    <value>300</value>
    <name>Number of seconds to sleep on Windows platforms after starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitAfterOnUnix</key>
    <value>20</value>
    <name>Number of seconds to sleep on Unix platforms after starting the JVM wrapper</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="describeAppliedPatch" log="Start the tibcohost."
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="isAdminDataCleanseRequired" > 

<graphx>37</graphx>
<graphy>301</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/util/JVMWrapper.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>wrapperName</key>
    <value>{{patchManagerPath}}/bin/tibamx_patchmgr</value>
    <name>Absolute path to the wrapper application</name>
    </Parameter>
    <Parameter>
    <key>command</key>
    <value></value>
    <name>One of the following command switches: --install, --uninstall, --update, --start, --stop, --run</name>
    </Parameter>
    <Parameter>
    <key>propFile</key>
    <value>{{patchManagerPath}}/bin/tibamx_patchmgr.tra</value>
    <name>Absolute path to the tra file used to launch the wrapper</name>
    </Parameter>
    <Parameter>
    <key>extraCommand</key>
    <value>describeAppliedPatches -configHomeLocation {{tibcoConfigHome}} -instanceName {{tibcoInstanceName}} -logFile {{logFileLocation}}/{{targetVersion}}-describeAppliedPatch.log</value>
    <name>Extra command a specific wrapper might need</name>
    </Parameter>
    <Parameter>
    <key>startInDir</key>
    <value>{{patchManagerPath}}/bin</value>
    <name>Execute from directory</name>
    </Parameter>
    <Parameter>
    <key>waitForCompletion</key>
    <value>true</value>
    <name>Wait for the command to complete (true or false)</name>
    </Parameter>
    <Parameter>
    <key>waitBeforeOnWindows</key>
    <value>0</value>
    <name>Number of seconds to sleep on Windows platforms before starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitBeforeOnUnix</key>
    <value>0</value>
    <name>Number of seconds to sleep on Unix platforms before starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitAfterOnWindows</key>
    <value>300</value>
    <name>Number of seconds to sleep on Windows platforms after starting the JVM wrapper</name>
    </Parameter>
    <Parameter>
    <key>waitAfterOnUnix</key>
    <value>20</value>
    <name>Number of seconds to sleep on Unix platforms after starting the JVM wrapper</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<CheckResult assertTrue="false" name="Assert233" type="com.itko.lisa.test.CheckResultContains">
<log>The following patches have been applied to TIBCO Host instance </log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>The following patches have been applied to TIBCO Host instance </param>
</CheckResult>

<CheckResult assertTrue="false" name="Assert269" type="com.itko.lisa.test.CheckResultContains">
<log>This patch is cumulative</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>This patch is cumulative</param>
</CheckResult>

    </Node>


    <Node name="isAdminDataCleanseRequired" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="isSystemNodeUpgradeRequired" > 

<graphx>778</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;   &#13;&#10;String isAdminDataCleanseRequired() {&#13;&#10;&#9;&#9;String response = &quot;Admin Data Cleanse is not required for &quot;  + targetVersion;&#13;&#10;&#9;&#9;&#13;&#10;        if (   (targetVersion.equals(&quot;3.1.2.HF5&quot;))  ||&#13;&#10;               (targetVersion.equals(&quot;3.1.2.HF6&quot;))  ||&#13;&#10;               (targetVersion.equals(&quot;3.1.3.HF2&quot;)) ) &#13;&#10;           {&#13;&#10;        &#9;&#9;response = &quot;Required: Admin Data Cleanse is required for &quot;  + targetVersion;&#13;&#10;                return response;&#13;&#10;           }&#13;&#10;           return response;&#13;&#10;        }&#13;&#10;&#13;&#10;return isAdminDataCleanseRequired();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Admin Data Cleanse required for {{targetVersion}}</log>
<then>adminDataCleanseFolder</then>
<valueToAssertKey></valueToAssertKey>
        <param>Required:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="adminDataCleanseFolder" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="checkPropFile" > 

<graphx>778</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;String adminDataCleanseFolder() {&#13;&#10;&#9;&#9;String response = &quot;admin-data-cleanse&quot;;&#13;&#10;&#9;&#9;&#13;&#10;        if ( targetVersion.equals(&quot;3.1.2.HF6&quot;)){&#13;&#10;        &#9;response = response + &quot;-3.1.2.HF6&quot;;&#13;&#10;            return response;&#13;&#10;        }    &#13;&#10;        else {&#13;&#10;            return response;&#13;&#10;        }        &#13;&#10;}&#13;&#10;return adminDataCleanseFolder();</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.checkPropFile.rsp</valueToFilterKey>
      <prop>adminDataCleanseFolder</prop>
      </Filter>

      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.adminDataCleanseFolder.rsp</valueToFilterKey>
      <prop>dataCleanseFolder</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="checkPropFile" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="buildPropFileContent" > 

<graphx>130</graphx>
<graphy>130</graphy>
<onerror>fail</onerror>
<script>if (propFile.equals(&quot;&quot;))&#13;&#10;    return true;&#13;&#10;else&#13;&#10;    return testExec.parseInState(propFile).replace(&quot;\\&quot;,&quot;/&quot;);</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.checkPropFile.rsp</valueToFilterKey>
      <prop>thPropFile</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Assert181" type="com.itko.lisa.test.CheckResultContains">
<log>Prop file is not set. Let&apos;s create it...</log>
<then>buildPropFileContent</then>
<valueToAssertKey></valueToAssertKey>
        <param>true</param>
</CheckResult>

    </Node>


    <Node name="buildPropFileContent" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="writePropFile" > 

<graphx>610</graphx>
<graphy>610</graphy>
<onerror>fail</onerror>
<script>str = &quot;&quot;;&#13;&#10;enterprise.name = &quot;&quot;;&#13;&#10;admin.server.name = &quot;&quot;;&#13;&#10;tibco.config.mgmt.home = &quot;&quot;;&#13;&#10;tibcoHostInstanceName= &quot;&quot;;&#13;&#10;&#13;&#10;// Sending th.inst.dir because of TAP-9141&#13;&#10;&#13;&#10;enterprise.name = testExec.parseInState(enterpriseName.toString());&#13;&#10;admin.server.name = testExec.parseInState(adminServerName.toString());&#13;&#10;tibco.config.mgmt.home = testExec.parseInState(tibcoConfigHome.toString()).replace(&apos;\\&apos;, &apos;/&apos;);&#13;&#10;tibcoHostInstanceName = testExec.parseInState(tibcoInstanceName.toString());&#13;&#10;&#13;&#10;str = str + &quot;admin.server.props=&quot; + tibco.config.mgmt.home + &quot;/admin/&quot; + enterprise.name + &quot;/private/&quot; + admin.server.name + &quot;/cli-connectivity.properties&quot; + line_separator;&#13;&#10;str = str + &quot;th.inst.dir=&quot; + tibco.config.mgmt.home + &quot;/tibcohost/&quot; +  tibcoHostInstanceName;&#13;&#10;return str;&#13;&#10;</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.buildPropFileContent.rsp</valueToFilterKey>
      <prop>thPropFileContent</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="writePropFile" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="cleanseAdminData" > 

<graphx>730</graphx>
<graphy>730</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/file/WriteFile.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>file</key>
    <value>{{propertyFileLocation}}/{{targetVersion}}-admindatacleanse.properties</value>
    <name>File to write into</name>
    </Parameter>
    <Parameter>
    <key>content</key>
    <value>{{thPropFileContent}}</value>
    <name>Text content to write in the file</name>
    </Parameter>
    <Parameter>
    <key>createIfNotExist</key>
    <value>true</value>
    <name>If set to true, file is created if it does not exist.</name>
    </Parameter>
    <Parameter>
    <key>encoding</key>
    <value></value>
    <name>encoding to use for a file, if blank, the encoding is system default encoding</name>
    </Parameter>
    <Parameter>
    <key>native2ascii</key>
    <value>false</value>
    <name>If set to true, converts the content from native encoding to ASCII with escaped Unicode</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.writePropFile.rsp</valueToFilterKey>
      <prop>thPropFile</prop>
      </Filter>

    </Node>


    <Node name="cleanseAdminData" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="isSystemNodeUpgradeRequired" > 

<graphx>970</graphx>
<graphy>970</graphy>
<Documentation>waitForCompletion is false because this step hangs if it is true.</Documentation>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/util/InvokeAnt.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>projectBaseDirName</key>
    <value>{{TIBCO_HOME}}/administrator/{{administratorFolderVersion}}/scripts/{{dataCleanseFolder}}</value>
    <name>Absolute path of the project base Directory. Optional.</name>
    </Parameter>
    <Parameter>
    <key>buildFileName</key>
    <value>{{TIBCO_HOME}}/administrator/{{administratorFolderVersion}}/scripts/{{dataCleanseFolder}}/build.xml</value>
    <name>Absolute path of the Ant build file. Required.</name>
    </Parameter>
    <Parameter>
    <key>logFileName</key>
    <value>{{logFileLocation}}/cleansedata-{{targetVersion}}.log</value>
    <name>Absolute path to the Ant log file. Optional.</name>
    </Parameter>
    <Parameter>
    <key>targetName</key>
    <value></value>
    <name>Name of the build target to be invoked. Optional.</name>
    </Parameter>
    <Parameter>
    <key>propertyFileName</key>
    <value>{{thPropFile}}</value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>antOpts</key>
    <value>-Djava.classes.dir=/{{=TIBCO_JAVA_HOME.replace(&quot;\\&quot;,&quot;/&quot;)}}/jre/lib</value>
    <name>ANT_OPTS environment variable. Optional. Ex: -Xms128m -Xmx512m -XX:PermSize=256m</name>
    </Parameter>
    <Parameter>
    <key>additionalAntCmdLineArgs</key>
    <value></value>
    <name>Additional ant commandline options. Optional. See ant --help for these options.</name>
    </Parameter>
    <Parameter>
    <key>additionalClasspath</key>
    <value></value>
    <name>Additional classpath to add to Ant. Optional.</name>
    </Parameter>
    <Parameter>
    <key>waitForCompletion</key>
    <value>true</value>
    </Parameter>
    <Parameter>
    <key>timeout</key>
    <value></value>
    <name>Timeout in seconds for ant command. Required only if waitForCompletion is true</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>

      <!-- Result Elements -->
<CheckResult assertTrue="false" name="Assert130" type="com.itko.lisa.test.CheckResultContains">
<log>Look for BUILD SUCCESSFUL</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>BUILD SUCCESSFUL</param>
</CheckResult>

    </Node>


    <Node name="isSystemNodeUpgradeRequired" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="end" > 

<graphx>778</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;String isSystemNodeUpgradeRequired() {&#13;&#10;&#9;&#9;String response = &quot;NotRequired : System Node Upgrade is not required for &quot;  + targetVersion;&#13;&#10;&#9;&#9;&#13;&#10;        if (   (targetVersion.equals(&quot;3.1.2.HF7&quot;))  ||&#13;&#10;               (targetVersion.equals(&quot;3.1.2.HF8&quot;))  ||&#13;&#10;               (targetVersion.equals(&quot;3.1.2.HF9&quot;))  ||&#13;&#10;               (targetVersion.equals(&quot;3.1.3.HF3&quot;))  ||&#13;&#10;               (targetVersion.equals(&quot;3.1.3.HF4&quot;)) ) &#13;&#10;           {&#13;&#10;        &#9;&#9;response = &quot;Required: System Node Upgrade is required for &quot;  + targetVersion;&#13;&#10;                return response;&#13;&#10;           }&#13;&#10;           return response;&#13;&#10;        }&#13;&#10;&#13;&#10;return isSystemNodeUpgradeRequired();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>upgrade systemNodefor {{targetVersion}}</log>
<then>UpgradeSystemNode</then>
<valueToAssertKey></valueToAssertKey>
        <param>Required:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="UpgradeSystemNode" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="end" > 

<graphx>10</graphx>
<graphy>10</graphy>
<Subprocess>{{TIBCO_AMX_LIBRARY}}/com/tibco/upgrade/UpgradeNode.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>upgradeScriptsPath</key>
    <value>{{patchManagerPath}}/scripts/upgrade/upgrade-to-{{targetVersion}}</value>
    <name>upgrade scripts location</name>
    </Parameter>
    <Parameter>
    <key>hostLogFile</key>
    <value>{{tibco.test.suite.log.dir}}/setup/tibcohost.log</value>
    <name>TIBCOHost log file to monitor start / stop</name>
    </Parameter>
    <Parameter>
    <key>antLogFile</key>
    <value>{{logFileLocation}}/{{targetVersion}}-upgradeNode-{{nodeName}}.log</value>
    </Parameter>
    <Parameter>
    <key>propFile</key>
    <value></value>
    <name>Absolute path to property file. Optional. If set, upgrade paramaters are optional</name>
    </Parameter>
    <Parameter>
    <key>enterpriseName</key>
    <value>{{admin.group.name}}</value>
    <name>Enterprise name</name>
    </Parameter>
    <Parameter>
    <key>tibcoInstanceName</key>
    <value>{{host.instance}}</value>
    <name>TIBCOHost instance name</name>
    </Parameter>
    <Parameter>
    <key>adminServerName</key>
    <value>{{admin.instance.name}}</value>
    <name>Admin Server name</name>
    </Parameter>
    <Parameter>
    <key>tibcoConfigHome</key>
    <value>{{TIBCO_CONFIG_HOME}}</value>
    <name>TIBCO config home</name>
    </Parameter>
    <Parameter>
    <key>nodeName</key>
    <value>SystemNode</value>
    <name>Nodename</name>
    </Parameter>
    <Parameter>
    <key>hostName</key>
    <value>{{host.name}}</value>
    <name>Hostname</name>
    </Parameter>
    <Parameter>
    <key>unattened</key>
    <value>true</value>
    <name>Flag to run upgrade scripts without any manual intervention- optional</name>
    </Parameter>
    <Parameter>
    <key>forceNoBackup</key>
    <value>true</value>
    <name>force backup flag - optional</name>
    </Parameter>
    <Parameter>
    <key>timeout</key>
    <value>1200</value>
    <name>Wait for a number of seconds before giving up on TIBCOHost</name>
    </Parameter>
    <Parameter>
    <key>propertyFileLocation</key>
    <value>{{logFileLocation}}</value>
    <name>folder for node properties file</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>

      <!-- Result Elements -->
<CheckResult assertTrue="false" name="Assert185" type="com.itko.lisa.test.CheckResultContains">
<log>{{admin.instance.name}} upgraded successfully</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>BUILD SUCCESSFUL</param>
</CheckResult>

<CheckResult assertTrue="true" name="Assert124" type="com.itko.lisa.test.CheckResultContains">
<log>Retry again if upgrade fails ...</log>
<then>UpgradeSystemNode</then>
<valueToAssertKey></valueToAssertKey>
        <param>ERROR - Failed to enable upgrade Application &apos;amx.logservice.app&apos;on node</param>
</CheckResult>

    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="unknown" > 

<graphx>1090</graphx>
<graphy>1090</graphy>
    </Node>


    <Node name="end" log=""
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="fail" > 

<graphx>1210</graphx>
<graphy>1210</graphy>
    </Node>


</TestCase>
