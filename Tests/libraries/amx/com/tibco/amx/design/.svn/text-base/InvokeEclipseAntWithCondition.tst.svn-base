<?xml version="1.0" ?>


<!-- Test Case created by LISA Test Editor -->
<!-- On: Wed Apr 25 13:49:19 PDT 2012 -->


<TestCase name="InvokeEclipseAntWithCondition" version="2">
<id>84d762a0</id>
<Documentation>Invokes the TIBCO BusinessStudio Ant utility based on user condition.</Documentation>
<sig>ZWQ9MiZ0Y3Y9MiZsaXNhdj00LjYuNyAoNC42LjcuMTYpJm5vZGVzPS0yMTEyMzMyNjgw</sig>
<rootNode>supportedOrNot</rootNode>
<subprocess>true</subprocess>

<initState>
    <Parameter>
    <key>studioHome</key>
    <value></value>
    <name>BusinessStudio home folder. Required.</name>
    </Parameter>
    <Parameter>
    <key>projectBaseDir</key>
    <value>Value</value>
    <name>Absolute path of the project base Directory. Optional.</name>
    </Parameter>
    <Parameter>
    <key>buildFile</key>
    <value></value>
    <name>Absolute path to the Ant build file. Required.</name>
    </Parameter>
    <Parameter>
    <key>target</key>
    <value></value>
    <name>Name of the build target to be invoked.</name>
    </Parameter>
    <Parameter>
    <key>data</key>
    <value></value>
    <name>Absolute path to the eclipse workspace. optional</name>
    </Parameter>
    <Parameter>
    <key>propertyFile</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>timeout</key>
    <value>1800</value>
    <name>Number of seconds to wait for completion. Required.</name>
    </Parameter>
    <Parameter>
    <key>userCondition</key>
    <value></value>
    <name>User condition. If assessed to true DAA generation will proceed else skipped</name>
    </Parameter>
</initState>

<resultState>
    <Parameter>
    <key>lisa.supportedOrNot.rsp</key>
    <value>Set in Step supportedOrNot</value>
    </Parameter>
    <Parameter>
    <key>lisa.supportedOrNot.rsp.time</key>
    <value>Set in Step supportedOrNot</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp.time</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp.time</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.createDAA.rsp.time</key>
    <value>Set in Step createDAA</value>
    </Parameter>
    <Parameter>
    <key>platformoption</key>
    <value>Set in Step supportedOrNot</value>
    </Parameter>
    <Parameter>
    <key>lisa.createDAA.rsp</key>
    <value>Set in Step createDAA</value>
    </Parameter>
    <Parameter>
    <key>lisa.log.rsp</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>lisa.log.rsp.time</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyInputVariables.rsp</key>
    <value>Set in Step verifyInputVariables</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyInputVariables.rsp.time</key>
    <value>Set in Step verifyInputVariables</value>
    </Parameter>
</resultState>

<Configurations>
<Configuration>
<name>default</name>
<external>false</external>
<props>
</props>
</Configuration>
</Configurations>
    <Node name="supportedOrNot" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="log" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
<Documentation>This feature is not supported on all OS</Documentation>
<remoteServer>local</remoteServer>
<onerror>fail</onerror>
<script>/*&#13;&#10;if (os_name.contains(&quot;Linux&quot;)) { // supported&#13;&#10; return true;&#13;&#10;}&#13;&#10;&#13;&#10;if (os_name.contains(&quot;Windows&quot;)) { // supported &#13;&#10; return true;&#13;&#10;}&#13;&#10;&#13;&#10;if (os_name.contains(&quot;SunOS&quot;)) { // supported&#13;&#10; return true;&#13;&#10;}&#13;&#10;&#13;&#10;if (os_name.contains(&quot;HP-UX&quot;)) { // not supported&#13;&#10; return false;&#13;&#10;}&#13;&#10;&#13;&#10;if (os_name.contains(&quot;AIX&quot;)) { // not supported&#13;&#10; return false;&#13;&#10;}&#13;&#10;&#13;&#10;if (os_name.contains(&quot;Mac&quot;)) { // not supported&#13;&#10; return false;&#13;&#10;}&#13;&#10;&#13;&#10;// by default, just skip that test case&#13;&#10;return false;&#13;&#10;*/&#13;&#10;//return userCondition;&#13;&#10;&#13;&#10;&#13;&#10;import java.io.File;&#13;&#10;String ext = &quot;&quot;;&#13;&#10;//String userCondition=&quot;true&quot;;&#13;&#10;if (os_name.contains(&quot;Windows&quot;))&#13;&#10; ext = &quot;.exe&quot;;&#13;&#10;File exe = new File(TIBCO_BS_HOME.replace(&quot;\\&quot;,&quot;/&quot;) + &quot;/eclipse/amx_eclipse_ant&quot; + ext);&#13;&#10;if (exe.exists()&amp;&amp; (userCondition))&#13;&#10; return true;&#13;&#10;else&#13;&#10; return false;&#13;&#10;</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.supportedOrNot.rsp</valueToFilterKey>
      <prop>platformoption</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Assert145" type="com.itko.lisa.test.CheckResultContains">
<log>DAA generation is skipped. Feature not supported on this OS or user condition assessed to false</log>
<then>end</then>
<valueToAssertKey></valueToAssertKey>
        <param>false</param>
</CheckResult>

    </Node>


    <Node name="log" log=""
          type="com.itko.lisa.test.TestNodeLogger" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="verifyInputVariables" > 

<graphx>10</graphx>
<graphy>10</graphy>
<Documentation></Documentation>
<remoteServer>local</remoteServer>
      <log>Invoking ant with following variables:&#13;&#10;studioHome={{studioHome}}&#13;&#10;buildFile={{buildFile}}&#13;&#10;data={{data}}&#13;&#10;propertyFile={{propertyFile}}&#13;&#10;propertyList={{propertyList}}&#13;&#10;target={{target}}&#13;&#10;projectBaseDir={{projectBaseDir}}&#13;&#10;</log>
    </Node>


    <Node name="verifyInputVariables" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="createDAA" > 

<graphx>778</graphx>
<graphy>10</graphy>
<Documentation></Documentation>
<remoteServer>local</remoteServer>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;String checkInputVariables() {&#13;&#10;&#9;&#9;String errorStr = &quot;Fail: &quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;            if ((studioHome == null) || (studioHome.equals(&quot;&quot;)) ) {&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;studioHome cannot be null.&quot;);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;           &#13;&#10;&#9;&#9;&#9;File studioHome2 = new File(testExec.parseInState(studioHome).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;if (!studioHome2.exists()) {&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;Studio home not found: &quot;+studioHome);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;if ((buildFile == null) || (buildFile.equals(&quot;&quot;)) ) {&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;buildFile cannot be null.&quot;);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;           &#13;&#10;&#9;&#9;&#9;File buildFile2 = new File(testExec.parseInState(buildFile).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;if (!buildFile2.canRead()) {&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;Build file not found/cannot be read: &quot;+buildFile);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;if (!buildFile2.isFile()) {&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;build file is not a normal file: &quot;+buildFile);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#13;&#10;            if ((data == null) || (data.equals(&quot;&quot;)) ) {&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;data cannot be null.&quot;);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;File propertyFile2 = null;&#13;&#10;&#9;&#9;&#9;if ((propertyFile != null) &amp;&amp; (!propertyFile.equals(&quot;&quot;))) {&#13;&#10;&#9;&#9;&#9;&#9;propertyFile = new File(testExec.parseInState(propertyFile).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;&#9;if (!propertyFile2.canRead()) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;Property file not found/cannot be read it: &quot;+propertyFile);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;if (!propertyFile.isFile()) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;property file is not a normal file: &quot;+propertyFile);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;File projectBaseDir2 = null;&#13;&#10;&#9;&#9;&#9;if ((projectBaseDir != null) &amp;&amp; (!projectBaseDir.equals(&quot;&quot;))) {&#13;&#10;&#9;&#9;&#9;&#9;projectBaseDir2 = new File(testExec.parseInState(projectBaseDir).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;&#9;if((!projectBaseDir2.exists()) || (!projectBaseDir2.isDirectory())) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;The project base directory is not valid: &quot;+projectBaseDir);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;             &#13;&#10;&#9;&#9;&#9;response = &quot;Pass: Input variables are valid.&quot;;&#13;&#10;&#13;&#10;&#9;&#9;}catch(Exception e) {&#13;&#10;&#9;&#9;&#9;response = errorStr + e.getLocalizedMessage();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;return checkInputVariables();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Input parameters incorrect</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>Fail:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="createDAA" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="end" > 

<graphx>10</graphx>
<graphy>10</graphy>
<Subprocess>{{TIBCO_AMX_LIBRARY}}/com/tibco/amx/design/InvokeEclipseAnt.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>studioHome</key>
    <value>{{studioHome}}</value>
    <name>BusinessStudio home folder. Required.</name>
    </Parameter>
    <Parameter>
    <key>projectBaseDir</key>
    <value></value>
    <name>Absolute path of the project base Directory. Optional.</name>
    </Parameter>
    <Parameter>
    <key>buildFile</key>
    <value>{{buildFile}}</value>
    <name>Absolute path to the Ant build file. Required.</name>
    </Parameter>
    <Parameter>
    <key>target</key>
    <value>{{target}}</value>
    <name>Name of the build target to be invoked. Optional.</name>
    </Parameter>
    <Parameter>
    <key>data</key>
    <value>{{data}}</value>
    <name>Absolute path to the Eclipse workspace. Required.</name>
    </Parameter>
    <Parameter>
    <key>propertyFile</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value>{{propertyList}}</value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>timeout</key>
    <value>1800</value>
    <name>Number of seconds to wait for completion. Required.</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>

      <!-- Result Elements -->
<CheckResult assertTrue="false" name="Assert142" type="com.itko.lisa.test.CheckResultContains">
<log>Assert [Assert142] fired false of type Result as String Contains Given String</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>BUILD SUCCESSFUL</param>
</CheckResult>

    </Node>


    <Node name="end" log=""
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="fail" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="unknown" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
    </Node>


</TestCase>
