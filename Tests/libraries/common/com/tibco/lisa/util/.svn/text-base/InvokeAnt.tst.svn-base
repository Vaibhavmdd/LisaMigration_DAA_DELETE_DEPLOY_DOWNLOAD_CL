<?xml version="1.0" ?>


<!-- Test Case created by LISA Test Editor -->
<!-- On: Fri Feb 18 17:28:59 PST 2011 -->


<TestCase name="InvokeAnt" version="2">
<id>d879a86d</id>
<Documentation>Invokes the ant command using the build file and target specified. &#13;&#10;This subprocess takes either property file or propertyList and passes it to the ant command invocation.&#13;&#10;&#13;&#10;Make sure the ant jars (ant.jar and ant-launcher.jar) and other required jars are in the LISA classpath.</Documentation>
<sig>ZWQ9MiZ0Y3Y9MiZsaXNhdj00LjYuNyAoNC42LjcuMTYpJm5vZGVzPS0xNDE0ODAyNTE4</sig>
<rootNode>log</rootNode>
<subprocess>true</subprocess>

<initState>
    <Parameter>
    <key>projectBaseDirName</key>
    <value></value>
    <name>Absolute path of the project base Directory. Optional.</name>
    </Parameter>
    <Parameter>
    <key>buildFileName</key>
    <value></value>
    <name>Absolute path of the Ant build file. Required.</name>
    </Parameter>
    <Parameter>
    <key>logFileName</key>
    <value>{{tibco.test.case.log.dir}}/ant.log</value>
    <name>Absolute path to the Ant log file. Optional.</name>
    </Parameter>
    <Parameter>
    <key>targetName</key>
    <value></value>
    <name>Name of the build target to be invoked. Optional.</name>
    </Parameter>
    <Parameter>
    <key>propertyFileName</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>antOpts</key>
    <value></value>
    <name>ANT_OPTS environment variable. Optional. Ex: -Xms128m -Xmx512m -XX:PermSize=256m</name>
    </Parameter>
    <Parameter>
    <key>additionalAntCmdLineArgs</key>
    <value></value>
    <name>Additional ant commandline options. Optional. See ant --help for these options.</name>
    </Parameter>
    <Parameter>
    <key>additionalClasspath</key>
    <value></value>
    <name>Additional classpath to add to Ant. Optional.</name>
    </Parameter>
    <Parameter>
    <key>waitForCompletion</key>
    <value>true</value>
    </Parameter>
    <Parameter>
    <key>timeout</key>
    <value>300</value>
    <name>Timeout in seconds for ant command. Required only if waitForCompletion is true</name>
    </Parameter>
</initState>

<resultState>
    <Parameter>
    <key>antArgs</key>
    <value>Set in Step getAntArguments</value>
    </Parameter>
    <Parameter>
    <key>antCmdLineArgs</key>
    <value>Set in Step getAntArguments</value>
    </Parameter>
    <Parameter>
    <key>lisa.command.exit.code</key>
    <value>Set in Step invokeAntFromCommandLine</value>
    </Parameter>
    <Parameter>
    <key>lisa.command.pid_handle</key>
    <value>Set in Step invokeAntFromCommandLine</value>
    </Parameter>
    <Parameter>
    <key>lisa.continue.rsp</key>
    <value>Set in Step continue</value>
    </Parameter>
    <Parameter>
    <key>lisa.continue.rsp.time</key>
    <value>Set in Step continue</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp.time</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp.time</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.getAntArguments.rsp</key>
    <value>Set in Step getAntArguments</value>
    </Parameter>
    <Parameter>
    <key>lisa.getAntArguments.rsp.time</key>
    <value>Set in Step getAntArguments</value>
    </Parameter>
    <Parameter>
    <key>lisa.getProjectBaseDir.rsp</key>
    <value>Set in Step getProjectBaseDir</value>
    </Parameter>
    <Parameter>
    <key>lisa.getProjectBaseDir.rsp.time</key>
    <value>Set in Step getProjectBaseDir</value>
    </Parameter>
    <Parameter>
    <key>lisa.invokeAntFromCommandLine.rsp</key>
    <value>Set in Step invokeAntFromCommandLine</value>
    </Parameter>
    <Parameter>
    <key>lisa.invokeAntFromCommandLine.rsp.time</key>
    <value>Set in Step invokeAntFromCommandLine</value>
    </Parameter>
    <Parameter>
    <key>lisa.timeout.rsp.time</key>
    <value>Set in Step timeout</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyAntInClasspath.rsp</key>
    <value>Set in Step verifyAntInClasspath</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyAntInClasspath.rsp.time</key>
    <value>Set in Step verifyAntInClasspath</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyAntVersion.rsp</key>
    <value>Set in Step verifyAntVersion</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyAntVersion.rsp.time</key>
    <value>Set in Step verifyAntVersion</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyInputVariables.rsp</key>
    <value>Set in Step verifyInputVariables</value>
    </Parameter>
    <Parameter>
    <key>lisa.verifyInputVariables.rsp.time</key>
    <value>Set in Step verifyInputVariables</value>
    </Parameter>
    <Parameter>
    <key>projectBaseDirectory</key>
    <value>Set in Step getProjectBaseDir</value>
    </Parameter>
    <Parameter>
    <key>lisa.checkCondition.rsp</key>
    <value>Set in Step checkCondition</value>
    </Parameter>
    <Parameter>
    <key>lisa.checkCondition.rsp.time</key>
    <value>Set in Step checkCondition</value>
    </Parameter>
    <Parameter>
    <key>lisa.returnResponse.rsp</key>
    <value>Set in Step returnResponse</value>
    </Parameter>
    <Parameter>
    <key>lisa.returnResponse.rsp.time</key>
    <value>Set in Step returnResponse</value>
    </Parameter>
</resultState>

<Configurations>
<Configuration>
<name>default</name>
<external>false</external>
<props>
</props>
</Configuration>
</Configurations>
    <Node name="log" log=""
          type="com.itko.lisa.test.TestNodeLogger" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="verifyAntInClasspath" > 

<graphx>10</graphx>
<graphy>10</graphy>
      <log>Invoking ant with following variables:&#13;&#10;buildFileName={{buildFileName}}&#13;&#10;logFileName={{logFileName}}&#13;&#10;propertyFileName={{propertyFileName}}&#13;&#10;propertyList={{propertyList}}&#13;&#10;targetName={{targetName}}&#13;&#10;projectBaseDirName={{projectBaseDirName}}&#13;&#10;antOpts={{antOpts}}&#13;&#10;additionalAntCmdLineArgs={{additionalAntCmdLineArgs}}&#13;&#10;waitforCompletion={{waitForCompletion}}</log>
    </Node>


    <Node name="verifyAntInClasspath" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="verifyAntVersion" > 

<graphx>266</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.net.URL;&#13;&#10;import java.lang.ClassLoader;&#13;&#10;import java.net.URLClassLoader;&#13;&#10;/*&#9;&#13;&#10;String verifyAntInClasspath1() {&#13;&#10;&#9;&#9;String response = &quot;Fail: ant is not found in classpath.&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;ClassLoader classLoader = ClassLoader.getSystemClassLoader();&#13;&#10;&#9;&#9;&#9;URL url = classLoader.getResource(&quot;org/apache/tools/ant/Project.class&quot;); &#13;&#10;&#9;&#9;&#9;if (url == null) {&#13;&#10;&#9;&#9;&#9;&#9;return response+&quot; null url&quot;;&#13;&#10;&#9;&#9;&#9;}&#9;&#9;&#9;&#13;&#10;&#9;&#9;} catch(Exception e) {&#9;&#9;&#9;  &#13;&#10;&#9;&#9;&#9;&#9;return response+&quot; Exception is: &quot;+e.getMessage();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;response =&quot;pass: ant is found in classpath.&quot;;&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;&#13;&#10;&#13;&#10;&#9;String verifyAntInClasspath3() {&#13;&#10;&#9;&#9;String response = &quot;Fail: ant is not found in classpath.&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;ClassLoader classLoader = com.itko.util.cpdlg.JavaUtils.getClassLoader();&#13;&#10;&#9;&#9;&#9;URL[] urls = ((URLClassLoader)classLoader).getURLs();&#13;&#10;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;for(int i = 0; i &lt; urls.length; i++) {&#13;&#10;&#9;&#9;&#9;&#9;response=&quot;\n&quot;+urls[i].getPath();&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;} catch(Exception e) {&#9;&#9;&#9;  &#13;&#10;&#9;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;// response =&quot;pass: ant is found in classpath.&quot;;&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;String verifyAntInClasspath4() {&#13;&#10;&#9;&#9;String response = &quot;Fail: ant is not found in classpath.&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;String[] rl = com.itko.util.cpdlg.JavaUtils.getClasspath();&#13;&#10;&#9;&#9;&#9;for(int i = 0; i &lt; rl.length; i++) {&#13;&#10;&#9;&#9;&#9;&#9;response=response+&quot;\n&quot;+rl[i];&#13;&#10;&#9;&#9;&#9;}&#9;&#9;&#13;&#10;&#9;&#9;} catch(Exception e) {&#9;&#9;&#9;  &#13;&#10;&#9;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;// response =&quot;pass: ant is found in classpath.&quot;;&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#13;&#10;&#9;String verifyAntInClasspath2() {&#13;&#10;&#9;&#9;String response = &quot;Fail: ant is not found in classpath.&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;ClassLoader classLoader = com.itko.lisa.test.Environment.getClassLoader();&#13;&#10;&#9;&#9;&#9;URL url = classLoader.getResource(&quot;org/apache/tools/ant/Project.class&quot;); &#13;&#10;&#9;&#9;&#9;if (url == null) {&#13;&#10;&#9;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;&#9;}&#9;&#9;&#9;&#13;&#10;&#9;&#9;} catch(Exception e) {&#9;&#9;&#9;  &#13;&#10;&#9;&#9;&#9;&#9;return response+&quot; Exception is: &quot;+e.getMessage();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;response =&quot;Pass: ant is found in classpath.&quot;;&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;static String verifyAntInClasspath() {&#13;&#10;&#9;&#9;String response = &quot;Fail: ant is not found in classpath.&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;com.itko.lisa.test.TestExec.class.forName(&quot;org.apache.tools.ant.Project&quot;);&#9;&#13;&#10;&#9;&#9;}catch(Exception e) {&#13;&#10;&#9;&#9;&#9;return response+e.getMessage();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;response =&quot;pass: ant is found in classpath.&quot;;&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;*/&#13;&#10;&#13;&#10;&#9;String verifyAntInClasspath() {&#13;&#10;&#9;&#9;String response = &quot;Fail: ant is not found in classpath.&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;// com.itko.util.cpdlg.JavaUtils.getClassLoader();&#13;&#10;&#9;&#9;&#9;ClassLoader classLoader = com.itko.lisa.test.Environment.getClassLoader();&#13;&#10;&#9;&#9;&#9;URL url = classLoader.getResource(&quot;org/apache/tools/ant/Project.class&quot;); &#13;&#10;&#9;&#9;&#9;if (url == null) {&#13;&#10;&#9;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;&#9;}&#9;&#9;&#9;&#13;&#10;&#9;&#9;} catch(Exception e) {&#9;&#9;&#9;  &#13;&#10;&#9;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;response =&quot;Pass: ant is found in classpath.&quot;;&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#9;&#13;&#10;&#13;&#10;return verifyAntInClasspath();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Verifying the input variables step failed.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>Fail:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="verifyAntVersion" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="verifyInputVariables" > 

<graphx>522</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;&#13;&#10;String verifyAnt() {&#13;&#10;&#9;&#9;String response = &quot;Fail:&quot;;&#13;&#10;&#9;&#9;String version = null;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;version = org.apache.tools.ant.Main.getAntVersion();&#13;&#10;&#9;&#9;&#9;// version = &quot;Apache Ant version 1.7.1 compiled on June 27&quot;;&#13;&#10;&#9;&#9;}catch(Exception e) {&#13;&#10;&#9;&#9;&#9;if ( e instanceof ClassNotFoundException) {&#13;&#10;&#9;&#9;&#9;&#9;response = response+&quot; Did not find ant in classpath!&quot;;&#13;&#10;&#9;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;response = response+&quot; Could not get the version of ant&quot;;&#13;&#10;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;String [] versionArray = version.split(&quot; &quot;);&#13;&#10;&#9;&#9;if (versionArray.length != 9) {&#13;&#10;&#9;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;&#9;Properties props = new Properties();&#13;&#10;&#9;&#9;&#9;&#9;  InputStream in = org.apache.tools.ant.Main.class.getResourceAsStream(&quot;/org/apache/tools/ant/version.txt&quot;);&#13;&#10;&#9;&#9;&#9;&#9;  props.load(in);&#13;&#10;&#9;&#9;&#9;&#9;  in.close();&#13;&#10;&#9;&#9;&#9;&#9;  version = props.getProperty(&quot;VERSION&quot;);&#13;&#10;&#9;&#9;&#9;}catch(Exception e) {&#13;&#10;&#9;&#9;&#9;&#9;response = response+&quot; Could not verify the version of ant. the version returned is: &quot;+version;&#13;&#10;&#9;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;&#9;}&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#13;&#10;&#9;&#9;}else {&#13;&#10;&#9;&#9;&#9;version = versionArray[3];&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;versionArray = version.split(&quot;\\.&quot;);&#13;&#10;&#9;&#9;if (versionArray.length != 3) {&#13;&#10;&#9;&#9;&#9;response = response+&quot; Could not verify the version of ant. the version returned is: &quot;+version;&#13;&#10;&#9;&#9;&#9;// response = response+&quot;\n&quot;+&quot; Expected version format is: x.y.z&quot;;&#13;&#10;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;version = versionArray[0]+&quot;.&quot;+versionArray[1];&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;if (Double.parseDouble(version) &lt; 1.7) {&#13;&#10;&#9;&#9;&#9;response = response+&quot;The version of ant should be at least 1.7.x. Current Version is: &quot;+versionArray[0]+&quot;.&quot;+versionArray[1];&#13;&#10;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;response = &quot;Pass: ant verified successfully.&quot;;&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;return verifyAnt();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Verifying the input variables step failed.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>Fail:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="verifyInputVariables" log="This step verifies the input variables for the invokeAnt subprocess."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="getAntArguments" > 

<graphx>778</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;String checkInputVariables() {&#13;&#10;&#9;&#9;String response = &quot;Fail:&quot;;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;if ((buildFileName == null) || (buildFileName.equals(&quot;&quot;)) ) {&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;buildFileName cannot be null.&quot;);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;           &#13;&#10;&#9;&#9;&#9;File buildFile = new File(testExec.parseInState(buildFileName).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;if (!buildFile.canRead()) {&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;Build file not found/cannot read it. &quot;+buildFileName);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;if (!buildFile.isFile()) {&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;throw new Exception(&quot;build file is not a normal file. &quot;+buildFileName);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;File propertyFile = null;&#13;&#10;&#9;&#9;&#9;if ((propertyFileName != null) &amp;&amp; (!propertyFileName.equals(&quot;&quot;))) {&#13;&#10;&#9;&#9;&#9;&#9;propertyFile = new File(testExec.parseInState(propertyFileName).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;&#9;if (!propertyFile.canRead()) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;Property file not found/cannot read it. &quot;+propertyFileName);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;if (!propertyFile.isFile()) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;property file is not a normal file. &quot;+propertyFileName);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;File projectBaseDir = null;&#13;&#10;&#9;&#9;&#9;if ((projectBaseDirName != null) &amp;&amp; (!projectBaseDirName.equals(&quot;&quot;))) {&#13;&#10;&#9;&#9;&#9;&#9;projectBaseDir = new File(testExec.parseInState(projectBaseDirName).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;&#9;&#9;&#9;&#9;if((!projectBaseDir.exists()) || (!projectBaseDir.isDirectory())) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;throw new Exception(&quot;The project base directory is not valid. &quot;+projectBaseDirName);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;            // Let&apos;s also verify if TIBCO_JAVA_HOME exists since we use that to launch Ant&#13;&#10;            File javaHome = new File(testExec.parseInState(TIBCO_JAVA_HOME).replace(&apos;\\&apos;, &apos;/&apos;));&#13;&#10;            if (!javaHome.exists()) {&#13;&#10;                throw new Exception(&quot;Java home directory is not valid: &quot; + TIBCO_JAVA_HOME);&#13;&#10;            }&#13;&#10;&#13;&#10;&#9;&#9;&#9;response = &quot;Pass: Input variables are valid.&quot;;&#13;&#10;&#13;&#10;&#9;&#9;}catch(Exception e) {&#13;&#10;&#9;&#9;&#9;response = &quot;Fail: &quot;+e.getLocalizedMessage();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return response;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;return checkInputVariables();</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Input parameters incorrect</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>Fail:.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="getAntArguments" log="This step gets the arguments to be passed to the ant invocation."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="getProjectBaseDir" > 

<graphx>1034</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;import org.apache.tools.ant.DefaultLogger;&#13;&#10;import org.apache.tools.ant.Project;&#13;&#10;import org.apache.tools.ant.ProjectHelper;&#13;&#10;&#13;&#10;&#9;&#13;&#10;&#9;&#9;&#9;String getAntArgs() {&#13;&#10;&#9;&#9;&#9;String response = &quot;&quot;;&#13;&#10;&#9;&#9;&#9;FileInputStream fis = null;&#13;&#10;&#9;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;&#9;File propertyFile = null;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;Properties props = null;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;if ((propertyFileName != null) &amp;&amp; (!propertyFileName.equals(&quot;&quot;))) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;response = response+&quot; -propertyfile &quot;+propertyFileName.replace(&quot;\\&quot;,&quot;/&quot;);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;if ((propertyList != null) &amp;&amp; (!propertyList.equals(&quot;&quot;))) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;String [] propArray = propertyList.split(&quot;,&quot;);&#13;&#10;&#9;&#9;&#9;&#9;&#9;for (int i =0; i &lt; propArray.length; i++) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;String [] keyPair = propArray[i].split(&quot;=&quot;);&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if (keyPair.length == 1) continue;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;//should we trim empty spaces?&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;response = response+&quot; -D&quot;+(String)keyPair[0]+&quot;=&quot;+(String)keyPair[1];&#13;&#10;&#9;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;                if ((projectBaseDirName != null) &amp;&amp; (!projectBaseDirName.equals(&quot;&quot;))) {&#13;&#10;                    response = response+&quot; -D&quot;+&quot;basedir=\&quot;&quot;+(String)projectBaseDirName.replace(&quot;\\&quot;,&quot;/&quot;) + &quot;\&quot;&quot;;&#13;&#10;                }&#13;&#10;                else {&#13;&#10;                    response = response+&quot; -D&quot;+&quot;basedir=\&quot;&quot;+(String)LISA_TC_PATH.replace(&quot;\\&quot;,&quot;/&quot;) + &quot;\&quot;&quot;;&#13;&#10;                }&#13;&#10;&#9;            &#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;}catch(Exception e) {&#13;&#10;&#9;&#9;&#9;&#9;response = &quot;Fail: &quot;+e;&#13;&#10;&#9;&#9;&#9;}finally {&#13;&#10;&#9;&#9;&#9;&#9;try {&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;&#9;if (fis != null) fis.close();&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;}catch(Exception ioe) {&#13;&#10;&#9;&#9;&#9;&#9;&#9;//ignore.&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;//System.out.println(&quot;response is:&quot;+response);&#13;&#10;&#9;&#9;&#9;return response;&#13;&#10;&#9;&#9;}&#13;&#10;return getAntArgs();</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.getAntArguments.rsp</valueToFilterKey>
      <prop>antCmdLineArgs</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Verifying the input variables step failed.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>Fail:.*</param>
</CheckResult>

    </Node>


    <Node name="getProjectBaseDir" log="This step gets the arguments to be passed to the ant invocation."
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="invokeAntFromCommandLine" > 

<graphx>10</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.FileReader;&#13;&#10;import java.io.InputStream;&#13;&#10;import java.io.OutputStream;&#13;&#10;import java.io.PrintStream;&#13;&#10;import java.util.Enumeration;&#13;&#10;import java.util.Properties;&#13;&#10;import java.util.Set;&#13;&#10;&#9;&#13;&#10;&#9;&#9;String getProjectbaseDir() {&#13;&#10;&#9;&#9;&#9;String baseDir = &quot;&quot;;&#13;&#10;            if ((projectBaseDirName != null) &amp;&amp; (!projectBaseDirName.equals(&quot;&quot;))) {&#13;&#10;                baseDir=(String)projectBaseDirName;&#13;&#10;            }&#13;&#10;            else {&#13;&#10;                baseDir=(String)LISA_TC_PATH;&#13;&#10;            }&#13;&#10;&#9;&#9;&#9;//System.out.println(&quot;baseDir is:&quot;+baseDir);&#13;&#10;&#9;&#9;&#9;return baseDir;&#13;&#10;&#9;&#9;}&#13;&#10;return getProjectbaseDir();</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.getProjectBaseDir.rsp</valueToFilterKey>
      <prop>projectBaseDirectory</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

<CheckResult assertTrue="true" name="Assert147" type="com.itko.lisa.test.CheckResultRegEx">
<log>Verifying the input variables step failed.</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>Fail:.*</param>
</CheckResult>

    </Node>


    <Node name="invokeAntFromCommandLine" log=""
          type="com.itko.lisa.utils.CommandLineExecNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="checkCondition" > 

<graphx>1290</graphx>
<graphy>10</graphy>
<cmd>{{=TIBCO_JAVA_HOME.replace(&quot;\\&quot;,&quot;/&quot;)}}/bin/java {{antOpts}} -cp {{additionalClasspath}}{{path.separator}}{{=TIBCO_COMMON_LIBRARY.replace(&quot;\\&quot;,&quot;/&quot;)}}/lib/ant-launcher.jar{{path.separator}}{{=TIBCO_COMMON_LIBRARY.replace(&quot;\\&quot;,&quot;/&quot;)}}/lib/ant-trax.jar{{path.separator}}{{=TIBCO_COMMON_LIBRARY.replace(&quot;\\&quot;,&quot;/&quot;)}}/lib/ant.jar{{path.separator}}{{=TIBCO_COMMON_LIBRARY.replace(&quot;\\&quot;,&quot;/&quot;)}}/lib/ant-contrib.jar{{path.separator}}{{=TIBCO_COMMON_LIBRARY.replace(&quot;\\&quot;,&quot;/&quot;)}}/lib/ant-nodeps.jar org.apache.tools.ant.launch.Launcher {{additionalAntCmdLineArgs}} {{antCmdLineArgs}} {{=logFileName.equals(&quot;&quot;)?&quot;&quot;:&quot;-logfile \&quot;&quot; + logFileName.replace(&quot;\\&quot;,&quot;/&quot;) + &quot;\&quot;&quot;}} -buildfile &quot;{{=buildFileName.replace(&quot;\\&quot;,&quot;/&quot;)}}&quot; {{targetName}}</cmd>
<basedir>{{projectBaseDirectory}}</basedir>
<toNode>fail</toNode>
<exceptionNode>fail</exceptionNode>
<timeOut>{{timeout}}</timeOut>
<killAtEnd>false</killAtEnd>
<wait>{{waitForCompletion}}</wait>
<addToEnv>false</addToEnv>
<spawn>false</spawn>
<execShell>true</execShell>
<env>
</env>
<exitCodes>
</exitCodes>
    </Node>


    <Node name="checkCondition" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="end" > 

<graphx>10</graphx>
<graphy>10</graphy>
<onerror>fail</onerror>
<script>import java.io.*;&#13;&#10;&#13;&#10;/* check for waitForCompletion flag and logFile flag&#13;&#10;   return true only when both are true&#13;&#10;   if true is returned then - ant log file is being read and output is&#13;&#10;   sent to the console&#13;&#10;   if false is returned then - test case ends &#13;&#10;*/&#13;&#10;&#13;&#10;if ( (waitForCompletion) &amp;&amp;&#13;&#10;     ((logFileName != null) &amp;&amp; (!logFileName.equals(&quot;&quot;)) ) )  &#13;&#10;{&#13;&#10;       return &quot;true&quot;; &#13;&#10;}else {  &#13;&#10;    return &quot;&quot;; &#13;&#10;}</script>

      <!-- Result Elements -->
<CheckResult assertTrue="true" name="check for waitForCompletion and logFileName flag" type="com.itko.lisa.test.CheckResultContains">
<log>waitForCompletion is {{waitForCompletion}} &amp; logFileName is {{=logFileName.equals(&quot;&quot;)?&quot;not specified&quot; : &quot;&quot; +  logFileName.replace(&quot;\\&quot;,&quot;/&quot;)}}</log>
<then>returnResponse</then>
<valueToAssertKey></valueToAssertKey>
        <param>true</param>
</CheckResult>

    </Node>


    <Node name="returnResponse" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="end" > 

<graphx>130</graphx>
<graphy>130</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}\com\tibco\lisa\file\ReadFile.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>file</key>
    <value>{{logFileName}}</value>
    <name>File to read</name>
    </Parameter>
    <Parameter>
    <key>encoding</key>
    <value></value>
    <name>encoding to use for a file, if blank, the encoding is system default encoding</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="end" log=""
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="fail" > 

<graphx>960</graphx>
<graphy>998</graphy>
    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="unknown" > 

<graphx>389</graphx>
<graphy>394</graphy>
    </Node>


</TestCase>
