<?xml version="1.0" ?>


<!-- Test Case created by LISA Test Editor -->
<!-- On: Tue Dec 11 17:21:37 PST 2012 -->


<TestCase name="ConfigureAMXSilentFile" version="2">
<id>55627170</id>
<Documentation>Configures download flag to false in the silent file for LGPL and Hibernate assemblies, configures the path for assemblies to refer to {{TIBCO_AMX_TEST_FUNC_RT}}/bat/install/downloads/</Documentation>
<sig>ZWQ9MiZ0Y3Y9MiZsaXNhdj00LjYuNyAoNC42LjcuMTYpJm5vZGVzPS0xNzk5MTk4NTA0</sig>
<rootNode>log</rootNode>
<subprocess>true</subprocess>

<initState>
    <Parameter>
    <key>silentFile</key>
    <value></value>
    <name>Silent file</name>
    </Parameter>
    <Parameter>
    <key>amxZip</key>
    <value></value>
    <name>Installer path</name>
    </Parameter>
    <Parameter>
    <key>sourceassemblyFolder</key>
    <value>{{TIBCO_AMX_TEST_FUNC_RT}}/bat/install/downloads/</value>
    <name>Assembly Folder location for copying </name>
    </Parameter>
    <Parameter>
    <key>destinationassemblyFolder</key>
    <value>{{tmpDir}}/amxinstaller/unzip</value>
    <name>Destination Assembly Folder</name>
    </Parameter>
</initState>

<resultState>
    <Parameter>
    <key>lisa.logProductName.rsp</key>
    <value>Set in Step logProductName</value>
    </Parameter>
    <Parameter>
    <key>lisa.logProductName.rsp.time</key>
    <value>Set in Step logProductName</value>
    </Parameter>
    <Parameter>
    <key>workingDir</key>
    <value>Set in Step folderNameForInstallerExtraction</value>
    </Parameter>
    <Parameter>
    <key>installSilentfile</key>
    <value>Set in Step switchForSilentFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.end.rsp.time</key>
    <value>Set in Step end</value>
    </Parameter>
    <Parameter>
    <key>lisa.setEnvInAmxSilentFile.rsp</key>
    <value>Set in Step setEnvInAmxSilentFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.setEnvInAmxSilentFile.rsp.time</key>
    <value>Set in Step setEnvInAmxSilentFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.fail.rsp.time</key>
    <value>Set in Step fail</value>
    </Parameter>
    <Parameter>
    <key>lisa.setTibcoHomeInAmxSilentFile.rsp</key>
    <value>Set in Step setTibcoHomeInAmxSilentFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.setTibcoHomeInAmxSilentFile.rsp.time</key>
    <value>Set in Step setTibcoHomeInAmxSilentFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.setTibcoConfigHomeInAmxSilentFile.rsp</key>
    <value>Set in Step setTibcoConfigHomeInAmxSilentFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.setTibcoConfigHomeInAmxSilentFile.rsp.time</key>
    <value>Set in Step setTibcoConfigHomeInAmxSilentFile</value>
    </Parameter>
    <Parameter>
    <key>hibernateZip</key>
    <value>Set in Step getHibernateAssemblyName</value>
    </Parameter>
    <Parameter>
    <key>lisa.copyAssemblies.rsp</key>
    <value>Set in Step copyAssemblies</value>
    </Parameter>
    <Parameter>
    <key>lisa.copyAssemblies.rsp.time</key>
    <value>Set in Step copyAssemblies</value>
    </Parameter>
    <Parameter>
    <key>lisa.log.rsp</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>lisa.log.rsp.time</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>valueData</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>ValuesToReplace_RowNum</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>xpathData</key>
    <value>Set in Step log</value>
    </Parameter>
    <Parameter>
    <key>lisa.setLGPAPathInAmxSilentFile.rsp</key>
    <value>Set in Step setLGPAPathInAmxSilentFile</value>
    </Parameter>
    <Parameter>
    <key>lisa.setLGPAPathInAmxSilentFile.rsp.time</key>
    <value>Set in Step setLGPAPathInAmxSilentFile</value>
    </Parameter>
</resultState>

<Configurations>
<Configuration>
<name>default</name>
<external>false</external>
<props>
</props>
</Configuration>
</Configurations>
    <Node name="log" log=""
          type="com.itko.lisa.test.TestNodeLogger" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="setEnvInAmxSilentFile" > 

<graphx>10</graphx>
<graphy>10</graphy>
      <log>configuring silent file  {{silentFile}}&#13;&#10;installer zip file is {{amxZip}} &#13;&#10;source assembly folder location is {{sourceassemblyFolder}}&#13;&#10;destination assembly folder location is {{destinationassemblyFolder}}</log>

      <!-- Data Sets -->
<readrec>ValuesToReplace</readrec>
    </Node>


    <Node name="setEnvInAmxSilentFile" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="setTibcoHomeInAmxSilentFile" > 

<graphx>130</graphx>
<graphy>130</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/file/ReplaceInFile.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>file</key>
    <value>{{silentFile}}</value>
    <name>File where to perform the search-replace</name>
    </Parameter>
    <Parameter>
    <key>oldString</key>
    <value>newEnv</value>
    <name>String to be replaced</name>
    </Parameter>
    <Parameter>
    <key>newString</key>
    <value>true</value>
    <name>New string value</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyFileName</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>prefix</key>
    <value>[[</value>
    <name>prefix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>suffix</key>
    <value>]]</value>
    <name>suffix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>encoding</key>
    <value>UTF-8</value>
    <name>Encoding to use for a file, if blank, the encoding is system default encoding</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="setTibcoHomeInAmxSilentFile" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="setTibcoConfigHomeInAmxSilentFile" > 

<graphx>130</graphx>
<graphy>130</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/file/ReplaceInFile.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>file</key>
    <value>{{silentFile}}</value>
    <name>File where to perform the search-replace</name>
    </Parameter>
    <Parameter>
    <key>oldString</key>
    <value>tibcoHome</value>
    <name>String to be replaced</name>
    </Parameter>
    <Parameter>
    <key>newString</key>
    <value>{{TIBCO_HOME}}</value>
    <name>New string value</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyFileName</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>prefix</key>
    <value>[[</value>
    <name>prefix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>suffix</key>
    <value>]]</value>
    <name>suffix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>encoding</key>
    <value>UTF-8</value>
    <name>Encoding to use for a file, if blank, the encoding is system default encoding</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="setTibcoConfigHomeInAmxSilentFile" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="copyAssemblies" > 

<graphx>130</graphx>
<graphy>130</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/file/ReplaceInFile.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>file</key>
    <value>{{silentFile}}</value>
    <name>File where to perform the search-replace</name>
    </Parameter>
    <Parameter>
    <key>oldString</key>
    <value>tibcoConfigHome</value>
    <name>String to be replaced</name>
    </Parameter>
    <Parameter>
    <key>newString</key>
    <value>{{TIBCO_CONFIG_HOME}}</value>
    <name>New string value</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyFileName</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>prefix</key>
    <value>[[</value>
    <name>prefix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>suffix</key>
    <value>]]</value>
    <name>suffix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>encoding</key>
    <value>UTF-8</value>
    <name>Encoding to use for a file, if blank, the encoding is system default encoding</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="copyAssemblies" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="500-1000" 
 useFilters="true" 
 quiet="false" 
          next="setLGPAPathInAmxSilentFile" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
<onerror>fail</onerror>
<script>// This routine is written in order to form LGPL zip path which relies on amxVersion and platform&#13;&#10;import java.io.File;&#13;&#10;import java.io.FileInputStream;&#13;&#10;import java.io.FileOutputStream;&#13;&#10;import java.io.IOException;&#13;&#10;&#13;&#10;&#13;&#10;String zipName = testExec.parseInState(amxZip).replace(&apos;\\&apos;,&apos;/&apos;);&#13;&#10;&#13;&#10;// look for zip file name&#13;&#10;zipName = zipName.substring(zipName.lastIndexOf(&quot;/&quot;)+1);&#13;&#10;String hibernateZipName = &quot;&quot;;&#13;&#10;&#13;&#10;String[] platforms = {&#13;&#10;                        &quot;aix53_power&quot;,&#13;&#10;                        &quot;linux24gl23_x86&quot;,&#13;&#10;                        &quot;linux26gl24_s390x&quot;,&#13;&#10;                        &quot;sol9_sparc&quot;,&#13;&#10;                        &quot;sol10_x86&quot;,&#13;&#10;                        &quot;win_x86&quot;,&#13;&#10;                      };&#13;&#10;&#13;&#10;String[] platforms_64 = {&#13;&#10;                        &quot;aix53_power_64&quot; , &#13;&#10;                        &quot;hpux112_ia64&quot;,&#13;&#10;                        &quot;linux24gl23_x86_64&quot;,&#13;&#10;                        &quot;sol9_sparc_64&quot;,&#13;&#10;                        &quot;sol10_x86_64&quot;,&#13;&#10;                        &quot;win_x86_64&quot;                 &#13;&#10;                      };&#13;&#10;&#13;&#10;String platform=&quot;&quot;;&#13;&#10;if (zipName.contains(&quot;64&quot;)) {&#13;&#10;    int index=0;&#13;&#10;        &#13;&#10;    for (String s : platforms_64) {&#13;&#10;        if (zipName.contains(platforms_64[index])) {&#13;&#10;            platform = platforms_64[index];&#13;&#10;        }&#13;&#10;    index++;&#13;&#10;    }&#13;&#10;}else {&#13;&#10;    int index=0;&#13;&#10;    for (String s : platforms) {&#13;&#10;        if (zipName.contains(platforms[index])) {&#13;&#10;            platform = platforms[index];&#13;&#10;        }&#13;&#10;    index++;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;// copy assemblies &#13;&#10;//String assemplyFolder = testExec.parseInState(TIBCO_AMX_TEST_FUNC_RT) + &quot;/&quot; + platform;&#13;&#10;&#13;&#10;String assemplyFolder = testExec.parseInState(sourceassemblyFolder) + &quot;/&quot; + platform;&#13;&#10;File assemplyFolderDir = new File(assemplyFolder);&#13;&#10;&#13;&#10;File[] files = assemplyFolderDir.listFiles();&#13;&#10;   &#13;&#10;for( File fi : files ) {&#13;&#10;    try {&#13;&#10;        // want to avoid reading .svn folder&#13;&#10;        if (fi.isDirectory())&#13;&#10;            continue;&#13;&#10;&#13;&#10;        File fo = new File(destinationassemblyFolder + &quot;/assemblies&quot;);&#13;&#10;        fo = new File(fo, fi.getName());&#13;&#10;&#13;&#10;        FileInputStream fis  = new FileInputStream(fi);&#13;&#10;        FileOutputStream fos = new FileOutputStream(fo);&#13;&#10;  &#13;&#10;        byte[] buf = new byte[1024];&#13;&#10;        int i = 0;&#13;&#10;        while((i = fis.read(buf))!= -1) {&#13;&#10;            fos.write(buf, 0, i);&#13;&#10;        }&#13;&#10;        fis.close();&#13;&#10;        fos.close();&#13;&#10;    }&#13;&#10;    catch (Exception e) {&#13;&#10;        return baseErrorMsg + &quot;: &quot; + e.getMessage();&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;return assemplyFolder ;&#13;&#10;&#13;&#10;&#13;&#10;</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.getHibernateAssemblyName.rsp</valueToFilterKey>
      <prop>hibernateZip</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="setLGPAPathInAmxSilentFile" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="end" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/file/ReplaceInFile.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>file</key>
    <value>{{silentFile}}</value>
    <name>File where to perform the search-replace</name>
    </Parameter>
    <Parameter>
    <key>oldString</key>
    <value>lgplAssemblyPath</value>
    <name>String to be replaced</name>
    </Parameter>
    <Parameter>
    <key>newString</key>
    <value>{{destinationassemblyFolder}}/assemblies</value>
    <name>New string value</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyFileName</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>prefix</key>
    <value>[[</value>
    <name>prefix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>suffix</key>
    <value>]]</value>
    <name>suffix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>encoding</key>
    <value>UTF-8</value>
    <name>Encoding to use for a file, if blank, the encoding is system default encoding</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="getHibernateAssemblyName" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="500-1000" 
 useFilters="true" 
 quiet="false" 
          next="setHibernatePathInAmxSilentFile" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
<onerror>fail</onerror>
<script>// This routine is written in order to form LGPL zip path which relies on amxVersion and platform&#13;&#10;&#13;&#10;String zipName = testExec.parseInState(amxZip).replace(&apos;\\&apos;,&apos;/&apos;);&#13;&#10;&#13;&#10;// look for zip file name&#13;&#10;zipName = zipName.substring(zipName.lastIndexOf(&quot;/&quot;)+1);&#13;&#10;String hibernateZipName = &quot;&quot;;&#13;&#10;&#13;&#10;String[] version = {&quot;3.1&quot;, &quot;3.2&quot; };&#13;&#10;String[] platforms = {&#13;&#10;                        &quot;aix53_power_64&quot;,&#13;&#10;                        &quot;aix53_power&quot; , &#13;&#10;                        &quot;hpux112_ia64&quot;,&#13;&#10;                        &quot;linux24gl23_x86_64&quot;,&#13;&#10;                        &quot;linux24gl23_x86&quot;,&#13;&#10;                        &quot;linux26gl24_s390x&quot;,&#13;&#10;                        &quot;sol9_sparc_64&quot;,&#13;&#10;                        &quot;sol9_sparc&quot;,&#13;&#10;                        &quot;sol10_x86_64&quot;,&#13;&#10;                        &quot;sol10_x86&quot;,&#13;&#10;                        &quot;win_x86_64&quot;,&#13;&#10;                        &quot;win_x86&quot;                 &#13;&#10;                      };&#13;&#10;&#13;&#10;int index=0;&#13;&#10;String platform=&quot;&quot;;&#13;&#10;for (String s : platforms) {&#13;&#10;    if (zipName.contains(platforms[index])) {&#13;&#10;        platform = platforms[index];&#13;&#10;    }&#13;&#10;    index++;&#13;&#10;}&#13;&#10;&#13;&#10;if ( zipName.contains(version[0]) ||&#13;&#10;     zipName.contains(version[1])&#13;&#10;   ) &#13;&#10;  &#13;&#10;{&#13;&#10;  hibernateZipName = &quot;assembly_tibco_com_tibco_tpcl_org_hibernate_feature_3.2.400.001.zip&quot;;&#13;&#10;}&#13;&#10;&#13;&#10;return hibernateZipName;&#13;&#10;&#13;&#10;</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.getHibernateAssemblyName.rsp</valueToFilterKey>
      <prop>hibernateZip</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="getLGPAAssemblyName" log=""
          type="com.itko.lisa.test.ScriptNode" 
          version="1" 
          think="500-1000" 
 useFilters="true" 
 quiet="false" 
          next="setLGPAPathInAmxSilentFile" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
<onerror>fail</onerror>
<script>// This routine is written in order to form LGPL zip path which relies on amxVersion and platform&#13;&#10;&#13;&#10;String zipName = testExec.parseInState(amxZip).replace(&apos;\\&apos;,&apos;/&apos;);&#13;&#10;&#13;&#10;// look for zip file name&#13;&#10;zipName = zipName.substring(zipName.lastIndexOf(&quot;/&quot;)+1);&#13;&#10;String lgpaZipName=&quot;&quot;;&#13;&#10;&#13;&#10;String[] version = {&quot;3.1&quot;, &quot;3.2&quot; };&#13;&#10;String[] platforms = {&#13;&#10;                        &quot;aix53_power_64&quot;,&#13;&#10;                        &quot;aix53_power&quot; , &#13;&#10;                        &quot;hpux112_ia64&quot;,&#13;&#10;                        &quot;linux24gl23_x86_64&quot;,&#13;&#10;                        &quot;linux24gl23_x86&quot;,&#13;&#10;                        &quot;linux26gl24_s390x&quot;,&#13;&#10;                        &quot;sol9_sparc_64&quot;,&#13;&#10;                        &quot;sol9_sparc&quot;,&#13;&#10;                        &quot;sol10_x86_64&quot;,&#13;&#10;                        &quot;sol10_x86&quot;,&#13;&#10;                        &quot;win_x86_64&quot;,&#13;&#10;                        &quot;win_x86&quot;                 &#13;&#10;                      };&#13;&#10;&#13;&#10;int index=0;&#13;&#10;String platform=&quot;&quot;;&#13;&#10;for (String s : platforms) {&#13;&#10;    if (zipName.contains(platforms[index])) {&#13;&#10;        platform = platforms[index];&#13;&#10;    }&#13;&#10;    index++;&#13;&#10;}&#13;&#10;&#13;&#10;// install log shows that it downloads 2 .zip - silent file has only one entry&#13;&#10;&#13;&#10;if ( zipName.contains(version[0]) ) // 3.1.x &#13;&#10;{&#13;&#10;    if ( platform.equals(&quot;linux24gl23_x86_64&quot;) )&#13;&#10;    {&#13;&#10;        lgpaZipName = &quot;product_tibco_eclipse_lgpl_3.4.2.001_linux24gl23_x86_64.zip&quot;;&#13;&#10;        // product_tibco_eclipse_lgpl_3.5.2.001_linux24gl23_x86_64.zip&#13;&#10;    } else &#13;&#10;    if ( platform.equals(&quot;linux24gl23_x86&quot;) ) &#13;&#10;    {&#13;&#10;        lgpaZipName = &quot;product_tibco_eclipse_lgpl_3.4.2.001_linux24gl23_x86.zip&quot;;&#13;&#10;        //product_tibco_eclipse_lgpl_3.5.2.001_linux24gl23_x86.zip    &#13;&#10;    } else&#13;&#10;    {&#13;&#10;        lgpaZipName = &quot;product_tibco_eclipse_lgpl_3.5.2.001_&quot; + platform + &quot;.zip&quot;;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;// 3.2.0 talks about downloading 2 zips - silent file has only one entries&#13;&#10;&#13;&#10;if ( zipName.contains(version[1]) ) // 3.2&#13;&#10;{&#13;&#10;    lgpaZipName = &quot;product_tibco_eclipse_lgpl_3.7.2.001_&quot; + platform + &quot;.zip&quot;;&#13;&#10;    // &quot;product_tibco_eclipse_lgpl_rcp_3.7.2.001&quot; + platform + &quot;.zip&quot;;&#13;&#10;}&#13;&#10;&#13;&#10;return lgpaZipName;&#13;&#10;&#13;&#10;</script>

      <!-- Filters -->
      <Filter type="com.itko.lisa.test.FilterSaveResponse">
        <valueToFilterKey>lisa.getLGPAAssemblyName.rsp</valueToFilterKey>
      <prop>lgpaZip</prop>
      </Filter>


      <!-- Result Elements -->
<CheckResult assertTrue="true" name="Any Exception Then Fail" type="com.itko.lisa.dynexec.CheckInvocationEx">
<log>Assert [Any Exception Then Fail] fired true of type Assert on Invocation Exception</log>
<then>fail</then>
<valueToAssertKey></valueToAssertKey>
        <param>.*</param>
</CheckResult>

    </Node>


    <Node name="setHibernatePathInAmxSilentFile" log=""
          type="com.itko.lisa.utils.ExecSubProcessNode" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="false" 
          next="getLGPAAssemblyName" > 

<graphx>-1</graphx>
<graphy>-1</graphy>
<Subprocess>{{TIBCO_COMMON_LIBRARY}}/com/tibco/lisa/file/ReplaceInFile.tst</Subprocess>
<getEvents>0</getEvents>
<sendConfig>true</sendConfig>
<fullyParseProps>true</fullyParseProps>
<sendCommonState>false</sendCommonState>
<getCommonState>false</getCommonState>
<onFail>fail</onFail>
<Parameters>
    <Parameter>
    <key>file</key>
    <value>{{silentFile}}</value>
    <name>File where to perform the search-replace</name>
    </Parameter>
    <Parameter>
    <key>oldString</key>
    <value>hibernateAssemblyPath</value>
    <name>String to be replaced</name>
    </Parameter>
    <Parameter>
    <key>newString</key>
    <value>{{TIBCO_AMX_TEST_FUNC_RT}}/bat/install/downloads/{{hibernateZip}}</value>
    <name>New string value</name>
    </Parameter>
    <Parameter>
    <key>propertyList</key>
    <value></value>
    <name>Name value pairs seperated by comma. ex: name1=value1,name2=value2,.. etc. This can be used in addition to passing property file. Optional</name>
    </Parameter>
    <Parameter>
    <key>propertyFileName</key>
    <value></value>
    <name>Absolute path of the file which contains the property name/value pairs. Optional</name>
    </Parameter>
    <Parameter>
    <key>prefix</key>
    <value>[[</value>
    <name>prefix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>suffix</key>
    <value>]]</value>
    <name>suffix to be used for the keys to substitute</name>
    </Parameter>
    <Parameter>
    <key>encoding</key>
    <value>UTF-8</value>
    <name>Encoding to use for a file, if blank, the encoding is system default encoding</name>
    </Parameter>
</Parameters>
<SaveProps>
</SaveProps>
    </Node>


    <Node name="fail" log=""
          type="com.itko.lisa.test.Abend" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="unknown" > 

<graphx>130</graphx>
<graphy>130</graphy>
    </Node>


    <Node name="end" log="Installation complete."
          type="com.itko.lisa.test.NormalEnd" 
          version="1" 
          think="0-0" 
 useFilters="true" 
 quiet="true" 
          next="fail" > 

<graphx>250</graphx>
<graphy>250</graphy>
    </Node>


    <DataSet type="com.itko.lisa.test.DataSheet" name="ValuesToReplace" atend="logInstallInfo" local="false" >
<sample>rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVz
aG9sZHhwP0AAAAAAAAx3CAAAABAAAAADdAAJdmFsdWVEYXRhdAATe3tlbnZpcm9ubWVudERlc2N9
fXQAFlZhbHVlc1RvUmVwbGFjZV9Sb3dOdW10AAExdAAJeHBhdGhEYXRhdAApL3Byb3BlcnRpZXMv
ZW50cnlbQGtleT0iZW52aXJvbm1lbnREZXNjIl14</sample>
<table>
<col>xpathData</col>
<col>valueData</col>
<tr>
<td>/properties/entry[@key=&quot;environmentDesc&quot;]</td>
<td>{{environmentDesc}}</td>
</tr>
<tr>
<td>/properties/entry[@key=&quot;environmentName&quot;]</td>
<td>{{environmentName}}</td>
</tr>
<tr>
<td>/properties/entry[@key=&quot;installationRoot&quot;]</td>
<td>{{tibcoHome}}</td>
</tr>
<tr>
<td>/properties/entry[@key=&quot;createNewEnvironment&quot;]</td>
<td>{{createNewEnvironment}}</td>
</tr>
</table>
    </DataSet>

</TestCase>
